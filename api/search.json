[{"title":"python 爬取《三国演义》小说 & 统计词频 & 生成词云图","url":"/posts/27412/","content":"\n\n## python爬取《三国演义》小说&统计词频&生成词云图\n\n### 注意点：\n\n 1. 爬取小说正文时用的正则表达式涉及到多行匹配。需要开启多行模式*(?s)*\n    ` book_content_re = re.compile(r'(?s)<div.*?id=\"htmlContent\">(.*?)</div>')`\n    \n[![image.png](https://i.postimg.cc/V6jn6qjq/image.png)](https://postimg.cc/N9j5CrCF)\n\n[![image.png](https://i.postimg.cc/wjytM5z1/image.png)](https://postimg.cc/TKx2HDpx)\n\n[![image.png](https://i.postimg.cc/QNfVqYxB/image.png)](https://postimg.cc/nMQHFkmZ)\n\n[![image.png](https://i.postimg.cc/sghXsVPS/image.png)](https://postimg.cc/ts9yzGMC)\n\n\n### 源代码练习\n\n``` python\nimport re\nimport requests\nimport jieba\nimport jieba.analyse\nimport codecs\nfrom collections import Counter\nimport wordcloud\nimport matplotlib.pyplot as plt\n\n# 要爬取的网址url\nurl = 'http://www.janpn.com/book/sanguoyanyi2.html'\n\ndef get_content(url):\n\n    # 先获取二进制数据，再进行编码\n\n    txt = requests.get(url).content.decode('utf-8')\n\n    # print(txt)\n\n    book_title = re.compile(r'<h3 class=\"bookTitle\">(.+)</h3>')\n    # m1.findall(txt)得到的是一个数组，取m1.findall(txt)[0]\n    # print(m1.findall(txt))\n\n    # book_chapters_re = re.compile(r'<li><a href=\"(.+\\.html)\">([第|回].+)</a></li>')\n    # book_chapters_re = re.compile(r'<ul class=\"panel-body panel-chapterlist\"><li><a href=\"(.+)\">(.*)</a></li></ul>')\n    # 一定要注意   要使用非贪婪模式  来匹配特定结尾.html\n    book_chapters_re = re.compile(r'<li><a href=\"(.*?\\.html)\".*?>(.+?)</a></li>')\n\n    book_chapters = book_chapters_re.findall(txt)\n    # 开启多行模式  正文是很多段落的\n    book_content_re = re.compile(r'(?s)<div.*?id=\"htmlContent\">(.*?)</div>')\n\n    # 过滤正文的\\r\\n\n    m3 = re.compile(r'\\r\\n')\n    # 过滤正文的&nbsp;\n    m4 = re.compile(r'&nbsp;')\n    # 过滤正文的<br />\n    m5 = re.compile(r'<br />')\n\n    print(book_chapters)\n    # print(book_chapters)\n    with open('三国演义.txt','a') as f:\n        for i in book_chapters:\n            print([i[0],i[1]])\n        # print(book_chapters)\n            print(i[0])\n            i_url = i[0]\n            print(\"正在下载--->%s\" % i[1])\n        # 根据每个章节的url，先获取二进制，再编码\n            content_html = requests.get(i_url).content.decode('utf-8')\n#             匹配正文\n            content = book_content_re.findall(content_html)[0]\n            print(content)\n            content = m3.sub('',content)\n            content = m4.sub('',content)\n            content = m5.sub('',content)\n            print(content)\n            f.write('\\n'+i[1]+'\\n')\n            f.write(content)\n\n\n\n# =================================================\n\n# 创建停用词列表\ndef stopwordlist():\n    stopwords = [line.strip() for line in open('../结巴分词/hit_stopwords.txt',encoding='UTF-8').readline()]\n    return stopwords\n\n\n# 对句子进行中文分词 并 去停用词\ndef seg_depart(sentence):\n    print('正在分词')\n    sentence_depart = jieba.cut(sentence.strip())\n\n#     创建一个停用词列表\n    stopwords = stopwordlist()\n#     输出结果为outstr\n    outstr = ''\n\n#     去停用词\n    for word in sentence_depart:\n        if word not in stopwords:\n            if word != '\\t':\n                outstr += word\n                outstr += ' '\n    return outstr\n\n# 读取文件并生成词云图\nfilepath = '三国演义.txt'\ndef create_word_cloud(filepath):\n\n    #读取文件内容\n    content = codecs.open(filepath,'r','gbk').read()\n\n#     去停用词\n    content = seg_depart(content)\n\n#     结巴分词\n    wordlist = jieba.cut(content)\n    wl = ' '.join(wordlist)\n\n    print(wl)\n\n#     配置词云图\n    wc = wordcloud.WordCloud(\n    #     这只背景颜色\n        background_color='white',\n    #     设置最大显示的词数\n        max_words=100,\n    #     设置字体路径\n        font_path = 'C:\\Windows\\Fonts\\msyh.ttc',\n    #\n        height=1200,\n        width=1600,\n    #     设置字体最大值\n        max_font_size=300,\n    #     设置有多少种随机配色方案\n        random_state=50\n    )\n\n#     生成词云图\n    myword = wc.generate(wl)\n\n#     展示词云图\n    plt.imshow(myword)\n    plt.axis('off')\n    plt.show()\n\n\n\n# =================================================\n\n# 开启爬虫\n# get_content(url)\n\n# 生成词云图\ncreate_word_cloud(filepath)\n\n# ===================================================\n\n\n# 读取文件  词频统计\ndef count_from_file(filepath,top_limit=0):\n    with codecs.open(filepath,'r','gbk') as f:\n        content = f.read()\n\n#         将多个空格替换为一个空格\n        content = re.sub(r'\\s+',r' ',content)\n        content = re.sub(r'\\.+',r' ',content)\n#         去停用词\n        content = seg_depart(content)\n\n        return count_from_str(content)\n\ndef count_from_str(content,top_limit=0):\n    if top_limit<=0:\n        top_limit=100\n\n#         提取文章的关键词\n    tags = jieba.analyse.extract_tags(content,topK=100)\n    print(\"关键词：\")\n    print(tags)\n\n    words = jieba.cut(content)\n\n    counter = Counter()\n\n    for word in words:\n        if word in tags:\n            counter[word]+=1\n\n    return  counter.most_common(top_limit)\n\n\n\n# =====================================\nprint(\"打印词频统计\")\n\n# 打印词频统计\nresult = count_from_file(filepath)\nprint(result)\n\n\ndef test(url):\n\n    # 开启多行匹配模式  因为如果涉及到换行符   就要用多行\n    book_content_re = re.compile(r'(?s)<div.*?id=\"htmlContent\">(.*?)</div>')\n    content_html = requests.get(url).content.decode('gbk')\n    print(content_html)\n    content = book_content_re.findall(content_html)\n    print(content)\n\n# test(\"http://www.janpn.com/book/171/171182/35225767.html\")\n```","categories":["python","词云图"],"tags":["python","爬虫","词频统计","词云图"]},{"title":"Python 中文分词及词频统计","url":"/posts/34275/","content":"\n# Python中文分词及词频统计\n\n![](https://s1.ax1x.com/2020/10/03/012XBq.png)\n\n## 中文分词\n中文分词(Chinese Word Segmentation)，将中文语句切割成单独的词组。英文使用空格来分开每个单词的，而中文单独一个汉字跟词有时候完全不是同个含义，因此，中文分词相比英文分词难度高很多。\n\n分词主要用于NLP 自然语言处理（Natural Language Processing），使用场景有：\n\n搜索优化，关键词提取（百度指数）\n语义分析，智能问答系统（客服系统）\n非结构化文本媒体内容，如社交信息（微博热榜）\n文本聚类，根据内容生成分类（行业分类）\n\n\n### 分词库\nPython的中文分词库有很多，常见的有：\n\n - jieba（结巴分词）\n - THULAC（清华大学自然语言处理与社会人文计算实验室）\n - pkuseg（北京大学语言计算与机器学习研究组）\n - SnowNLP\n - pynlpir\n - CoreNLP\n - pyltp\n\n通常前三个是比较经常见到的，主要在易用性/准确率/性能都还不错。我个人常用的一直都是结巴分词（比较早接触），最近使用pkuseg，两者的使用后面详细讲。\n\n## 结巴分词\n\n### 简介\n\n - “结巴”中文分词：做最好的 Python 中文分词组件\n - 支持三种分词模式：\n\t - 精确模式，试图将句子最精确地切开，适合文本分析；\n\t - \t全模式，把句子中所有的可以成词的词语都扫描出来, 速度非常快，但是不能解决歧义；\n\t - \t搜索引擎模式，在精确模式的基础上，对长词再次切分，提高召回率，适合用于搜索引擎分词。\n - \t支持繁体分词\n - 支持自定义词典\n\n\n### 实例\n我们使用京东商场的美的电器评论来看看结巴分词的效果。如果你没有安装结巴分词库则需要在命令行下输入pip install jieba，安装完之后即可开始分词之旅。\n\n评论数据整理在文件meidi_jd.csv文件中，读取数据前先导入相关库。因为中文的文本或文件的编码方式不同编码选择gb18030，有时候是utf-8、gb2312、gbk自行测试。\n\n``` python\n\n# 导入相关库\nimport pandas as pd\nimport jieba\n\n# 读取数据\ndata = pd.read_csv('meidi_jd.csv', encoding='gb18030')\n\n# 查看数据\ndata.head()\n```\n\n![买家评价](https://s1.ax1x.com/2020/10/03/01RS4U.png)\n\n``` python\n# 生成分词\ndata['cut'] = data['comment'].apply(lambda x : list(jieba.cut(x)))\n\ndata.head()\n```\n\n![01Riv9.png](https://s1.ax1x.com/2020/10/03/01Riv9.png)\n\n到这里我们仅仅通过一行代码即可生成中文的分词列表，如果你想要生成分词后去重可以改成这样。\n\n``` python\ndata['cut'] = data['comment'].apply(lambda x : list(set(jieba.cut(x))))\n```\n\n\t['很', '好', '很', '好', '很', '好', '很', '好', '很', '好', '很', '好', '很', '好', '很', '好', '很', '好', '很', '好', '很', '好']\n\n这时候我们就需要导入自定义的词典，以便包含 jieba 词库里没有的词。虽然 jieba 有新词识别能力，但是自行添加新词可以保证更高的正确率。自定义词典采用一词一行，为了演示我添加了“很好”并保存在dict.txt文件中，让我们开始用自定义的词典吧！\n\n``` python\ndata['cut'] = data['comment'].apply(lambda x : list(jieba.cut(x)))\n\ndata.head()\n\nprint(data['cut'].loc[14])\n```\n\n\n\t['很好', '很好', '很好', '很好', '很好', '很好', '很好', '很好', '很好', '很好', '很好']\n\n## 停用词\n分词的过程中我们会发现实际上有些词实际上意义不大，比如：标点符号、嗯、啊等词，这个时候我们需要将停用词去除掉。首先我们需要有个停用词词组，可以自定义也可以从网上下载词库，这里我们使用网上下载的停用词文件StopwordsCN.txt。\n\n\n``` python\n# 读取停用词数据\nstopwords = pd.read_csv('StopwordsCN.txt', encoding='utf8', names=['stopword'], index_col=False)\n\nstopwords.head()\n```\n\n![01RkuR.png](https://s1.ax1x.com/2020/10/03/01RkuR.png)\n接下里我们只要适当更改分词的代码即可在分词的时候去掉停用词：\n\n```python\n# 转化词列表\nstop_list = stopwords['stopword'].tolist()\n\n# 去除停用词\ndata['cut'] = data['comment'].apply(lambda x : [i for i in jieba.cut(x) if i not in stop_list])\n\ndata.head()\n```\n\n![01RAD1.png](https://s1.ax1x.com/2020/10/03/01RAD1.png)\n\n## 词频统计\n到这里我们基本是已经学会用Python库进行分词，关于词频统计的方式也很多，我们先将所有分词合并在一起方便统计。\n\n``` python\n# 将所有的分词合并\nwords = []\n\nfor content in data['cut']:\n    words.extend(content)\n```\n\n### 方式一：\n\n``` python\n# 创建分词数据框\ncorpus = pd.DataFrame(words, columns=['word'])\ncorpus['cnt'] = 1\n\n# 分组统计\ng = corpus.groupby(['word']).agg({'cnt': 'count'}).sort_values('cnt', ascending=False)\n\ng.head(10)\n```\n\n### 方式二：\n\n``` python\n# 导入相关库\nfrom collections import Counter\nfrom pprint import pprint\n\n\ncounter = Counter(words)\n\n# 打印前十高频词\npprint(counter.most_common(10))\n```\n\n\n\t[('不错', 3913),\n\t('安装', 3055),\n\t('好', 2045),\n\t('很好', 1824),\n\t('买', 1634),\n\t('热水器', 1182),\n\t('挺', 1051),\n\t('师傅', 923),\n\t('美', 894),\n\t('送货', 821)]\n\n## 结尾\n我个人的使用建议，如果想简单快速上手分词可以使用结巴分词，但如果追求准确度和特定领域分词可以选择pkuseg加载模型再分词。另外jieba和THULAC并没有提供细分领域预训练模型，如果想使用自定义模型分词需使用它们提供的训练接口在细分领域的数据集上进行训练，用训练得到的模型进行中文分词。\n\n## 代码练习\n\n``` python\nimport jieba\nimport jieba.analyse\nimport codecs\nimport re\nfrom collections import Counter\nfrom wordcloud import WordCloud\nimport matplotlib.pyplot as plt\nimport wordcloud\n\nstr = \"我在河南大学上学，今年22岁了\"\n\nseg_list = jieba.cut(str,cut_all=True)\nprint(\"全模式：\"+\"/\".join(seg_list))\n\nseg_list = jieba.cut(str,cut_all=False)\nprint(\"默认(精确模式)：\"+\"/\".join(seg_list))\n\n# 搜索引擎模式\nseg_list = jieba.cut_for_search(str)\nprint(\"搜索引擎模式：\"+\"/\".join(seg_list))\n\n# 添加用户自定义词典\nstr = \"大连圣亚在大连\"\nseg_list = jieba.cut(str,cut_all=False)\nprint(\"默认(精确模式)：\"+\"/\".join(seg_list))\n\n# 添加自定义词典后\njieba.load_userdict(r\"./user_dict.txt\")\nseg_list = jieba.cut(str,cut_all=False)\nprint(\"默认(精确模式)：\"+\"/\".join(seg_list))\n\nstr = \"我家在河南省驻马店市汝南县东官庄镇\"\nseg_list = jieba.cut(str) #默认是精确模式\nprint(\"精确模式：\"+\"/\".join(seg_list))\n\n# 动态调整词典\njieba.add_word(\"东官庄镇\")\nseg_list = jieba.cut(str)\nprint(\"精确模式：\"+\"/\".join(seg_list))\n\n\n# 加载停用词\n# 创建停用词列表\ndef stopwordlist():\n    stopwords = [line.strip() for line in open('./hit_stopwords.txt',encoding='UTF-8').readlines()]\n    return stopwords\n\n\n# 对句子进行中文分词\ndef seg_depart(sentence):\n    print('正在分词')\n    sentence_depart = jieba.cut(sentence.strip())\n    # 创建一个停用词列表\n    stopwords = stopwordlist()\n    # 输出结果为 outstr\n    outstr = ''\n#     去停用词\n    for word in sentence_depart:\n        if word not in stopwords:\n            if word != '\\t':\n                outstr += word\n                outstr += \" \"\n    return outstr\n\n\n# 给出文档路径\nfilename = \"./text.txt\"\noutfilename = \"./out.txt\"\ninputs = open(filename,'r',encoding='UTF-8')\noutputs = open(outfilename,'w',encoding='UTF-8')\n\n\njieba.add_word(\"停用词\")\n# 将输出结果写到out.txt中\nfor line in inputs:\n    line_seg = seg_depart(line)\n\n    outputs.write(line_seg + '\\n')\n    print(\"-------------------------正在分词和去停用词--------------------------\")\n    print(\"原文：\"+line)\n    print(\"去停用词：\"+line_seg)\n\noutputs.close()\ninputs.close()\nprint(\"删除停用词和分词成功！！！\")\n\n\n# class WordCounter(object):\ndef count_from_file(file,top_limit=0):\n    with codecs.open(file,'r','UTF-8') as f:\n        content = f.read()\n        # 将多个空格替换为一个空格\n        content =re.sub(r'\\s+',r' ',content)\n        content = re.sub(r'\\.+',r' ',content)\n\n        # 去停用词\n        content = seg_depart(content)\n\n\n        return count_from_str(content,top_limit=top_limit)\n\n\ndef count_from_str(content,top_limit=0):\n    if top_limit <= 0:\n        top_limit = 100\n    #     提取文章的关键词\n    tags = jieba.analyse.extract_tags(content,topK=100)\n\n    words = jieba.cut(content)\n\n    counter = Counter()\n\n    for word in words:\n        if word in tags:\n            counter[word] += 1\n\n    return counter.most_common(top_limit)\n\n\n# if __name__ == '__main__':\n#     counter = WordCounter()\n#     retult = counter.count_from_file(r'./text.txt',top_limit=10)\n\n    # print(retult)\n\nprint(\"打印词频==============\")\nretult = count_from_file(r'./text.txt',top_limit=10)\nprint(retult)\n\n\nprint(\"*\"*100)\n\n# 例子\n# sentence = 'Ilikeyou '\n# wc = wordcloud.WordCloud()\n# pic = wc.generate(sentence)\n# plt.imshow(pic)\n# plt.axis(\"off\")\n# plt.show()\n\n# wc.to_file('test.png')\n\nprint(\"分词并生成词云图\")\n\ndef create_word_cloud(file):\n\n    content = codecs.open(file,'r','UTF-8').read()\n#     结巴分词\n    wordlist = jieba.cut(content)\n    wl = \" \".join(wordlist)\n\n    print(wl)\n\n#     设置词云图\n    wc = wordcloud.WordCloud(\n    #     设置背景颜色\n        background_color='pink',\n    #     设置最大显示的词数\n        max_words=100,\n    #     设置字体路径\n        font_path = 'C:\\Windows\\Fonts\\msyh.ttc',\n        height = 1200,\n        width=1600,\n    #     设置字体最大值\n        max_font_size=300,\n    #     设置有多少种配色方案，即多少种随机生成状态\n        random_state=30,\n    )\n\n    # 生成词云图\n    myword = wc.generate(wl)\n\n    # 展示词云图\n    plt.imshow(myword)\n    plt.axis(\"off\")\n    plt.show()\n    wc.to_file('py_pic.png')\n\n# content = codecs.open(\"./text.txt\",'r','UTF-8').read()\ncreate_word_cloud(\"text.txt\")\n\n\n\n```","categories":["python","自然语言处理"],"tags":["python","中文分词"]},{"title":"python 爬取网站的小说","url":"/posts/63780/","content":"\n\n### 截图\n![034SHA.png](https://s1.ax1x.com/2020/10/03/034SHA.png)\n![034k38.png](https://s1.ax1x.com/2020/10/03/034k38.png)\n\n\n### 源代码\n\n``` python\nimport requests\n\n# re是正则表达式\nimport re\n\n# 要爬取的小说url\nurl = 'http://www.shujy.com/5200/244309/'\n\nresponse = requests.get(url)\n\nresponse.encoding='utf-8'\n\nhtml = response.text\n\nprint(html)\n\nprint('*'*100)\n# 小说标题   正则表达式匹配\ntitle=re.findall(r'<meta property=\"og:novel:book_name\" content=\"(.*?)\"/>',html)[0]\n\nprint(title)\n\n# 新建一个txt文件来保存小说内容   与该py文件在同一目录中\n\nfb = open('%s.txt'% title,'w',encoding='utf-8')\n\n\n# 小说的章节目标都在标签<div id='list'>里我们通过下面的代码获取对应的章节名和url。用一个list来存放章节信息。\ndl=re.findall(r'<div id=\"list\">.*?</div>',html,re.S)[0]\nchapter_info_list=re.findall(r'<a href=\"(.*?)\">(.*?)</a>',dl)\n\n\nprint(\"*\"*100)\nprint(\"获取章节列表\")\n# 循环每一章节，分别下载，先把章节的链接，章节名提取出来。\nfor chapter_info in  chapter_info_list:\n    chapter_url,chapter_title = chapter_info\n    chapter_url = \"http://www.shujy.com/5200/244309/%s\" % chapter_url\n    chapter_url = chapter_url.replace(' ','')\n    print(chapter_url)\n\n    # 下载小说内容\n    chapter_response = requests.get(chapter_url)\n    chapter_response.encoding='utf-8'\n    # print(chapter_response.text)\n    chapter_html = chapter_response.text\n    # 小说的具体内容是在标签<div id=content>里，和获取小说章节一样我们采用正则表达式来取得小说的内容。\n    chapter_content = re.findall(r'<div id=\"content\">(.*?)</div>',chapter_html,re.S)[0]\n    # 这时候的chaper_content的内容还包含<br>，&nbsp等标签\n    # print(chapter_content)\n\n    #做数据的清洗\n    chapter_content = chapter_content.replace('&nbsp;','')\n    chapter_content = chapter_content.replace('<br />','')\n    chapter_content = chapter_content.replace('&amp;t','')\n    chapter_content = chapter_content.replace('&emsp;','')\n    chapter_content = chapter_content.replace('&t;','')\n    chapter_content = chapter_content.replace('\\n','')\n    # 数据清洗后的内容   是纯文本了\n    print(chapter_content)\n\n#     把小说保存到txt中\n    fb.write(chapter_title)\n    fb.write('\\n')\n    fb.write(chapter_content)\n    fb.write('\\n')\n    print(chapter_url,chapter_title)\n\n\n\n\n```","categories":["python","爬虫"],"tags":["python","小说"]},{"title":"python 爬取网站的小说 2","url":"/posts/7481/","content":"\n## 使用正则表达式\n### re.compile 函数\n\ncompile 函数用于编译正则表达式，生成一个正则表达式（ Pattern ）对象，供 match() 和 search() 这两个函数使用。\n\n语法格式为：\n\n``` python\nre.compile(pattern[, flags])\n```\n\n参数：\n\n- **pattern** : 一个字符串形式的正则表达式\n- **flags** : 可选，表示匹配模式，比如忽略大小写，多行模式等，具体参数为：\n  1. **re.I** 忽略大小写\n  2. **re.L** 表示特殊字符集 \\w, \\W, \\b, \\B, \\s, \\S 依赖于当前环境\n  3. **re.M** 多行模式\n  4. **re.S** 即为 **.** 并且包括换行符在内的任意字符（**.** 不包括换行符）\n  5. **re.U** 表示特殊字符集 \\w, \\W, \\b, \\B, \\d, \\D, \\s, \\S 依赖于 Unicode 字符属性数据库\n  6. **re.X** 为了增加可读性，忽略空格和 **#** 后面的注释\n\n### findall\n\n在字符串中找到正则表达式所匹配的所有子串，并返回一个列表，如果没有找到匹配的，则返回空列表。\n\n**注意：** match 和 search 是匹配一次 findall 匹配所有。\n\n语法格式为：\n\n``` python\nfindall(string[, pos[, endpos]])\n```\n\n参数：\n\n- **string** : 待匹配的字符串。\n- **pos** : 可选参数，指定字符串的起始位置，默认为 0。\n- **endpos** : 可选参数，指定字符串的结束位置，默认为字符串的长度。\n\n## python爬虫之小说网站--下载小说(正则表达式)\n\n### 思路:\n\n 1. 找到要下载的小说首页,打开网页源代码进行分析(例:https://www.kanunu8.com/files/old/2011/2447.html)\n 2. 分析自己要得到的内容,首先分析url,发现只有后面的是变化的，先获得小说的没有相对路径，然后组合成新的url(每章小说的url)\n 3. 获得每章小说的内容，进行美化处理\n\n\n### 相关截图\n![03qR9s.png](https://s1.ax1x.com/2020/10/03/03qR9s.png)\n\n![03qfcq.png](https://s1.ax1x.com/2020/10/03/03qfcq.png)\n\n![03qIBT.png](https://s1.ax1x.com/2020/10/03/03qIBT.png)\n \n \n \n### 源代码\n``` python\nimport re\nimport requests\n\n# 要爬取的网站\nurl = 'https://www.kanunu8.com/book4/10509/'\n\n# 先获取二进制，再进行解码\ntxt = requests.get(url).content.decode('gbk')\n# txt.conten是二进制形式的   ---n<head>\\r\\n<title>\\xd6\\xd0\\xb9\\xfa\\xba\\xcf\\xbb\\xef\\xc8\\xcb\n# print(txt)\n\nm1 = re.compile(r'<td colspan=\"4\" align=\"center\"><strong>(.+)</strong>')\n# print(m1.findall(txt))\n\nm2 = re.compile(r'<td( width=\"25%\")?><a href=\"(.+\\.html)\">(.+)</a></td>')\nprint(m2.findall(txt))\n\n# 获得小说的目录以及对应的每个章节的相对路径\nraw = m2.findall(txt)\n\nsanguo = []\nfor i in raw:\n    print([i[2],url+i[1]])\n    # ['第五章 成功之母', 'https://www.kanunu8.com/book4/10509/184616.html']\n    # 生成每个章节对应的url\n    sanguo.append([i[2],url+i[1]])\n\nprint(\"*\"*100)\nprint(sanguo)\n# [['第一章 梦的起源', 'https://www.kanunu8.com/book4/10509/184612.html'], ['第二章 偶像兄弟', 'https://www.kanunu8.com/book4/10509/184613.html'], ['第三章 恋爱必修', 'https://www.kanunu8.com/book4/10509/184614.html'], ['第四章 爱的代价', 'https://www.kanunu8.com/book4/10509/184615.html'], ['第五章 成功之母', 'https://www.kanunu8.com/book4/10509/184616.html'], ['第六章 命运转折', 'https://www.kanunu8.com/book4/10509/184617.html'], ['第七章 被迫下海', 'https://www.kanunu8.com/book4/10509/184618.html'], ['第八章 渐行渐远', 'https://www.kanunu8.com/book4/10509/184619.html'], ['第九章 三箭合一', 'https://www.kanunu8.com/book4/10509/184620.html'], ['第十章 梦想起航', 'https://www.kanunu8.com/book4/10509/184621.html'], ['第十一章 领航梦想', 'https://www.kanunu8.com/book4/10509/184622.html'], ['第十二章 平地波澜', 'https://www.kanunu8.com/book4/10509/184623.html'], ['第十三章 新的招牌', 'https://www.kanunu8.com/book4/10509/184624.html'], ['第十四章 神的弱点', 'https://www.kanunu8.com/book4/10509/184625.html'], ['第十五章 裂隙初现', 'https://www.kanunu8.com/book4/10509/184626.html'], ['第十六章 上市之争', 'https://www.kanunu8.com/book4/10509/184627.html'], ['第十七章 梦想巅峰', 'https://www.kanunu8.com/book4/10509/184628.html'], ['第十八章 乾纲独断', 'https://www.kanunu8.com/book4/10509/184629.html'], ['第十九章 一剑穿心', 'https://www.kanunu8.com/book4/10509/184630.html'], ['第二十章 渡尽劫波', 'https://www.kanunu8.com/book4/10509/184631.html'], ['尾\\u3000声', 'https://www.kanunu8.com/book4/10509/184632.html']]\n\n\n# 匹配每章节的正文内容\n# 每章小说的正文在<p>标签中\nm3 = re.compile(r'<p>(.+)</p>',re.S)\n\n# 小说中的<br />要被替换为空白\nm4 = re.compile(r'<br />')\n\n# &nbsp;也要被替换\nm5 = re.compile(r'&nbsp;&nbsp;&nbsp;&nbsp;')\n\n# 新建一个txt 中国合伙人1.txt\nwith open('中国合伙人1.txt','a') as f:\n    for i in sanguo:\n        # i[1] 是章节的url\n        i_url = i[1]\n        print(\"正在下载--->%s\" % i[0])\n        # 根据每个章节的url，先获取正文页面的二进制，再编码\n        r_nr = requests.get(i_url).content.decode('gbk')\n        # 匹配正文  ：带有<p>的\n        n_nr = m3.findall(r_nr)\n        print(n_nr)\n        # 把<br/>替换为空  sub()和replace()区别：sub()可以用正则\n        n = m4.sub('',n_nr[0])\n        # 把&nbsp;也替换为空\n        n2 = m5.sub('',n)\n        n2 = n2.replace('\\n','')\n        # 写入txt\n        # i[0]是章节名字\n        f.write('\\n'+i[0]+'\\n')\n        f.write(n2)\n```","categories":["python","爬虫"],"tags":["python","小说"]},{"title":"免费实用的图床","url":"/posts/6165/","content":"\n\n无论是使用 Markdown 进行写作、搭建博客，还是与他人分享图片，我们都离不开名为「图床」的工具。它可以让我们将图片转换成更容易分享的链接，提高工作、交流的效率。我们为大家精选了这八个免费图床，它们都具有无需注册，点开即用的特性，同时作为公共图床你也不用担心因流量会爆而钱包瞬间被掏空。\n\n图床工具最重要的就是稳定和快捷。今天介绍的图床不受网络条件的限制，无论是上传者还是访问者，都可以稳定地连接图床。点开即用的特性也给我们带来了更为便利的体验。作为用户，我们最关心的自然是图床的上传速度。为此，我准备了一张 3M 的 GIF 和一张 100K 的 PNG 用于测试。上传速度因网络环境而异，本文测试结果仅供参考。\n\n### ImgURL\nhttps://imgurl.org/\nImgURL 是由国内独立开发者制作的图床工具，已在 [GitHub](https://github.com/helloxz/imgurl) 开源。ImgURL 支持拖拽、粘贴等多种上传方式。在上传测试中，GIF 耗时 5 秒，PNG 实现秒传，处于可接受的范围内。\n\nImgURL 的图片编辑功能着实让人眼前一亮。在你上传了一张图片后，你可以对其进行裁切、压缩，甚至是添加水印的操作。除了可以将图片导出为 URL 外，ImgURL 还支持选择 HTML、Markdown 等格式。\n\n\nImgURL\nImgURL 对游客做出了上传限制。每日仅支持上传 10 张照片，每张照片的大小不能超过 5M，适合上传图片不多的用户。你可以在 [这里](https://imgurl.org/) 使用 ImgURL。\n\n### upload.cc\nhttps://upload.cc/\nupload.cc 采用了类似 Material Design 的设计，界面清晰明了。它支持 JPEG、PNG 等五种常见格式，同样支持拖拽上传及多张照片同时上传。上传后的图片会显示在左侧，对于不需要的图片，你可以随时删除。\n\nupload.cc 提供了浏览器插件。如果你使用的是 Chrome 或 Firefox 浏览器，可以通过插件直接上传图片。插件的下载链接在这里：Chrome、Firefox。在测试中，GIF 上传耗时近 8 秒，PNG 可以秒传。\n\n\nupload.cc\nupload.cc 对照片大小有限制。单张照片最大 5M，且仅支持常见格式，适合需要频繁分享小图的用户。你可以在 [这里](https://upload.cc/) 使用 upload.cc。\n\n### SM.MS\nhttps://sm.ms/\n提到图床工具，一定少不了大名鼎鼎的 SM.MS，不少人都会将其作为自己的主力图床。除了连接稳定外，SM.MS 还开放了 API，你可以通过捷径、Tasker 等自动化工具做一个自己的图床工具。SM.MS 在测试中表现良好，GIF 可以在 3 秒内完成传输，PNG 与其他工具一样可以秒传。\n\n\nsm.ms\nSM.MS 支持上传单张最大 5M 的图片，每次上传最多支持 10 张图片，适合作为主力图床使用。SM.MS 还提供了官方 iOS 和 Android 客户端，你可以在 App Store 或 Google Play 免费下载。你可以在 [这里](https://sm.ms/) 使用 SM.MS。\n\n\n### **路过图床**  推荐\nhttps://imgchr.com/\n与 SM.MS 一样，路过图床也是适合作为主力图床的工具。它以「无限空间」和「无限流量」作为最大的亮点，同时具有全球 CDN 加速以确保高速、稳定。在上传测试中，GIF 上传耗时约 5 秒。路过图床较为繁琐的一点是，它会先显示预览和编辑，需要进行二次确认。\n\n在路过图床上传照片时，你可以对其进行裁切，或是设定自动删除的时限。除了生成原图链接外，路过图床还会为你生成缩略图的链接，以满足不同需求。这样一来，你既可以分享原图以求图片精度，也可以分享缩略度以求访问速度。\n\n\n路过图床\n路过图床仅对单次上传的大小做出了限制。游客只能上传小于 5M 的图片，注册后可上传 10M 内的图片，适合作为主力图床使用。路过图床还为电商用户提供了专门的上传空间，你可以在这里访问。你可以在 [这里](https://imgchr.com/) 使用路过图床。\n\n### 小贱贱图床\nhttps://pic.xiaojianjian.net/\n小贱贱图床是寄存于新浪图床的工具，宣称不限流量、永久免费。由于调用了微博图床的 API，它具有较高的稳定性。小贱贱图床也提供了多种图片大小可供选择，直接修改链接中默认的 large 即可。\n\n经过测试，无论是 GIF，还是 PNG，都可以在数秒内完成上传。由于新浪对图床外链的限制，在部分地区可能会出现无法正常访问图片的现象，小贱贱图床也提供了解决方案可供参考。\n\n\n小贱贱图床\n小贱贱图床对上传数量做出了限制。每日仅支持上传 20 张图片，适合上传需求较少的用户。你可以在 这里 使用小贱贱图床。\n\n### Postimage\nhttps://postimages.org/\nPostimage 是一款来自国外的图床工具，支持按照一定大小缩放图片及设置图片自动删除。在上传完成后，Postimage 会为你生成多种链接格式以满足不同需求。令人眼前一亮的是，Postimage 还会生成一个用于删除当前图片的链接，你只要访问那个链接即可将图片删除。\n\n除了支持网页上传外，Postimage 也提供了 Windows 客户端。你可以在 [这里](https://postimages.org/app) 下载它的桌面客户端，支持直接将本地文件上传到 Postimage、截图上传等功能。Postimage 在测试中的表现不错，GIF 耗时 4 秒。或许是因为进度条的原因，PNG 的耗时要比其他工具稍长一点，但仍在可接受的范围内。\n\n\npostimage 对文件大小暂时不设限，但官方的会对频繁传输大量图片的可疑账号进行监控甚至封禁。postimage 适合作为主力图床使用，如果你是身在海外的时差党，它或许会比国内图床更适合你。你可以在 [这里](https://postimages.org/) 使用 postimage。\n\n### 鲜咕嘟\nhttp://www.xiangudu.com/\n鲜咕嘟也是采用了新浪图床 API 的图床工具，界面设计上要比小贱贱图床更加美观，页面上也没有那么多广告。鲜咕嘟支持无限制的批量上传，如果你有大量图片需要上传，它或许是个好选择。在测试中，鲜咕嘟上传 GIF 的速度不太理想，但 PNG 依然实现秒传。\n\n\n鲜咕嘟\n鲜咕嘟支持单张最大 20M 的图片，适合需要上传大尺寸图片的用户。但过大尺寸的图片会被压缩到 1800px 的大小。你可以在 [这里](http://www.xiangudu.com/) 使用鲜咕嘟。\n\n### 偶流\nhttps://upload.ouliu.net/\n偶流是国内的一个老牌图床工具，它的页面设计也极具年代感，多年以来的可靠性也值得信赖。令人意外的是，偶流除了支持图片，还支持 txt 文本的上传，你可以用它来分享文本文件。偶流是一款专注于论坛分享的图床工具，生成的链接包含源文件和论坛贴图、个性签名代码。在测试中，PNG 的上传可以实现秒传，但 GIF 耗时较久。\n\n\n偶流\n偶流支持单张最大 10M 的文件，但系统会不定期进行文件清除，比较适合临时使用。你可以在 [这里](https://upload.ouliu.net/) 使用偶流图床工具。","categories":["随笔"],"tags":["图床","免费"]},{"title":"加密文件","url":"/posts/53407/","content":"\n\n欢迎使用 **{小书匠}(xiaoshujiang)编辑器**，您可以通过 `小书匠主按钮>模板` 里的模板管理来改变新建文章的内容。","categories":["加密"],"tags":["加密"]},{"title":"有道翻译反爬虫机制","url":"/posts/52867/","content":"\n\n\n### 破解有道翻译反爬虫机制\n\n`web`端的有道翻译，在之前是直接可以爬的。也就是说只要获取到了他的接口，你就可以肆无忌惮的使用他的接口进行翻译而不需要支付任何费用。那么自从有道翻译推出他的`API`服务的时候，就对这个接口做一个反爬虫机制（如果大家都能免费使用到他的翻译接口，那他的API服务怎么赚钱）。这个反爬虫机制在爬虫领域算是一个非常经典的技术手段。那么他的反爬虫机制原理是什么？如何破解？接下来带大家一探究竟。\n\n#### 一、正常的爬虫流程：\n\n如果你要爬取他的翻译接口，这个流程还是不能少的。首先我们打开有道翻译的链接：`http://fanyi.youdao.com/`。然后在页面中`右键->检查->Network项`。这时候就来到了网络监听窗口，以后你在这个页面中发送的所有网络请求，都会在`Network`这个地方显示出来。接着我们在翻译的窗口输入我们需要翻译的文字，比如输入`hello`。然后点击`自动翻译`按钮，那么接下来在下面就可以看到浏览器给有道发送的请求，这里截个图看看：\n\n![img](http://upload-images.jianshu.io/upload_images/6620012-2d52e77678c661b3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n在上图，我们可以看到发送了很多的网络请求，这里我们点击第一个网络请求进行查看：\n\n![img](http://upload-images.jianshu.io/upload_images/6620012-7168cd0ee6af6345.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n可以看到，我们在点击自动翻译的时候，发送的请求就是上图中`Request URL`的那个`URL`，然后我们再点击那个`Response`，我们可以看到返回的结果：\n\n![img](http://upload-images.jianshu.io/upload_images/6620012-48a28609da33059b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n并且，现在我们再回到`Headers`的地方，然后滚动到最下面，可以看到有一个`Form Data`的地方，这个下面展示了许多的数据，这些数据就是你在点击**翻译**的时候浏览器给服务器发送的数据：\n\n![img](http://upload-images.jianshu.io/upload_images/6620012-f583c9da8e189be0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n对其中几个比较重要的数据进行解释：\n\n- `i`：需要进行翻译的字符串，这个地方我们输入的是hello。\n- `salt`：加密用到的盐。这个是我们破解有道反爬虫机制的关键点，后面会讲到。\n- `sign`：签名字符串。也是破解反爬虫机制的关键点。\n\n其他的数据类型暂时就不怎么重要了，都是\n\n[^\n\n[^undefined]:\n\nundefined]:\n\n固定写法，我们后面写代码的时候直接鞋子就可以了。到现在为止，我们就可以写一个简单的爬虫，去调用有道翻译的接口了。这里我们使用的网络请求库是`Python3`自带的`urllib`，相关代码如下：\n\n```python\n# 导入需要的库\nimport urllib.request\nimport urllib.parse\nimport json\n \n# 等待用户输入需要翻译的单词\ncontent = input('请输入需要翻译的单词：')\n \n# 有道翻译的url链接\nurl = 'http://fanyi.youdao.com/translate_o?smartresult=dict&smartresult=rule&sessionFrom=null'\n \n# 发送给有道服务器的数据\ndata = {}\n \n# 需要翻译的文字\ndata['i'] = content\n# 下面这些都先按照我们之前抓包获取到的数据\ndata['from'] = 'AUTO'\ndata['to'] = 'AUTO'\ndata['smartresult'] = 'dict'\ndata['client'] = 'fanyideskweb'\ndata['salt'] = '1500349255670'\ndata['sign'] = '997742c66698b25b43a3a5030e1c2ff2'\ndata['doctype'] = 'json'\ndata['version'] = '2.1'\ndata['keyfrom'] = 'fanyi.web'\ndata['action'] = 'FY_BY_CL1CKBUTTON'\ndata['typoResult'] = 'true'\n \n# 对数据进行编码处理\ndata = urllib.parse.urlencode(data).encode('utf-8')\n \n# 创建一个Request对象，把url和data传进去，并且需要注意的使用的是POST请求\nrequest = urllib.request.Request(url=self.url, data=data, method='POST')\n# 打开这个请求\nresponse = urllib.request.urlopen(request)\n# 读取返回来的数据\nresult_str = response.read().decode('utf-8')\n# 把返回来的json字符串解析成字典\nresult_dict = json.loads(result_str)\n \n# 获取翻译结果\nprint('翻译的结果是：%s' % result_dict)\n```\n\n我们运行这个文件后，当我们输入的是`hello`的时候，我们可以得到**哈罗**的这个正确的翻译结果。而当我们输入其他需要翻译的字符串的时候，比如输入`i love you`，那么就会得到一个错误代码`{\"errorCode\":50}`。这就奇怪了，有道词典不可能只能翻译一个英文单词吧。而这个，就是有道词典的反爬虫机制。接下来我们就来破解有道词典的反爬虫机制。\n\n#### 二、破解反爬虫机制：\n\n我们可以多次的进行翻译，并且每次翻译后都去查看翻译的时候发送的这个网络请求，比较每次翻译时候发送的`Form Data`的值。我们注意到，`Form Data`在每次发送网络请求的时候，只有`i`和`salt`以及`sign`这三个是不同的，其他的数据都是一样的，这里我用`hello`和`world`两个单词翻译时候`Form Data`的数据进行比较：\n\n![img](http://upload-images.jianshu.io/upload_images/6620012-12b013bffcea8553.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n![img](http://upload-images.jianshu.io/upload_images/6620012-2e3d7fe4b93dc4c9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n图中的`Form Data`也证实了我刚刚所说的，就是除了`i`、`salt`以及`sign`是不一样的。其余都是一样的。而`i`不一样是很正常的。因为`i`代表的是要翻译的字符串，这个不同是很正常。而`salt`和`sign`这两个东西不一样，是怎么产生的呢？这里我们可以分析一下，这两个值在每次请求的时候都不一样，只有两种情况：第一是每次翻译的时候，浏览器会从有道服务器获取一下这两个值。这样可以达到每次翻译的时候值不同的需求。第二是在本地，用`JS`代码按照一定的规则生成的。那么我们首先来看第一个情况，我们可以看到在每次发送翻译请求的时候，并没有一个请求是专门用来获取这两个值的：\n\n![img](http://upload-images.jianshu.io/upload_images/6620012-5e51b3b7e502c1ae.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n所以就可以排除第一种情况。就只剩下一种可能，那就是在本地自己生成的，如果是在本地自己生成的，那么规则是什么呢？这里我们点击网页，查看网页源代码，查找所有的`JS`文件，我们找到那个`fanyi.js`：\n\n![img](http://upload-images.jianshu.io/upload_images/6620012-3549e83ba035b4d8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n然后点击这个文件，跳转到这个源文件中，然后全选所有的代码，复制下来，再打开站长工具：`http://tool.chinaz.com/Tools/jsformat.aspx`。把代码复制进去后，点击格式化：\n\n![img](http://upload-images.jianshu.io/upload_images/6620012-ca2f23120359ea66.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n然后把格式化后的代码，复制下来，用`sublime`或者`pycharm`打开都可以，然后搜索`salt`，可以找到相关的代码：\n\n![img](http://upload-images.jianshu.io/upload_images/6620012-a22e5f21858c5b15.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n这里我们就可以发现所有的值的生成原理了。这里来做个简介：\n\n- d：代表的是需要翻译的字符串。\n  \n- `f`：当前时间的时间戳加上0-10的随机字符串。\n- `u`：一个常量——`fanyideskweb`。\n- `c`：一个常量——`rY0D^0'nM0}g5Mm1z%1G4`。\n- `salt`：就是`f`变量，时间戳。\n- `sign`：使用的是`u + d + f + c`的`md5`的值。\n\n知道`salt`和`sign`的生成原理后，我们就可以写`Python`代码，来对接他的接口了，以下是相关代码：\n\n```python\nimport urllib.request\n \nimport urllib.parse\nimport json\nimport time\nimport random\nimport hashlib\n \ncontent = input('请输入需要翻译的句子：')\n \nurl = 'http://fanyi.youdao.com/translate_o?smartresult=dict&smartresult=rule&sessionFrom=https://www.google.com/'\n \ndata = {}\n \nu = 'fanyideskweb'\nd = content\nf = str(int(time.time()*1000) + random.randint(1,10))\nc = 'rY0D^0\\'nM0}g5Mm1z%1G4'\n \nsign = hashlib.md5((u + d + f + c).encode('utf-8')).hexdigest()\n \ndata['i'] = content\ndata['from'] = 'AUTO'\ndata['to'] = 'AUTO'\ndata['smartresult'] = 'dict'\ndata['client'] = 'fanyideskweb'\ndata['salt'] = f\ndata['sign'] = sign\ndata['doctype'] = 'json'\ndata['version'] = '2.1'\ndata['keyfrom'] = 'fanyi.web'\ndata['action'] = 'FY_BY_CL1CKBUTTON'\ndata['typoResult'] = 'true'\n \ndata = urllib.parse.urlencode(data).encode('utf-8')\nrequest = urllib.request.Request(url=url,data=data,method='POST')\nresponse = urllib.request.urlopen(request)\n \nprint(response.read().decode('utf-8'))\n```\n\n#### 写在最后：\n\n像以上这种，通过用`JS`在本地生成随机字符串的反爬虫机制，在爬虫的时候是经常会遇到的一个问题。希望通过以上的讲解，能为大家提供一种思路。以后再碰到这种问题的时候知道该如何解决。这样本篇文章的目的也就达到了。","categories":["python","爬虫"],"tags":["python","爬虫"]},{"title":"读取 txt 文件并生成词云图","url":"/posts/64463/","content":"\n## 读取txt文件并生成词云图\n\n[![03jWIU.md.png](https://s1.ax1x.com/2020/10/03/03jWIU.md.png)](https://imgchr.com/i/03jWIU)\n\n\n- ### (一)下载第三方模块\n\n  ###### 1.wordcloud:它把我们带权重的关键词渲染成词云。\n\n  ###### 2.jieba：是一个分词模块，因为我是从一个txt文本里提取关键词，所以需要 jieba 来分词并统计词频。如果是已经有了现成的数据，不再需要它。\n\n  ``` \n  pip install wordcloud\n  \n  pip install jieba\n  ```\n  \n  - ### （二）WordCloud类的使用\n\n  | WordCloud构造方法的参数 | 说明                                                         |\n  | ----------------------- | ------------------------------------------------------------ |\n  | font_path               | 字体路径，需要展现什么字体就把该字体路径+后缀名写上，如：font_path = ‘黑体.ttf’ |\n  | width                   | 输出的画布宽度，默认为400像素                                |\n  | height                  | 输出的画布高度，默认为200像素                                |\n  | prefer_horizontal       | 词语水平方向排版出现的频率，默认 0.9 （所以词语垂直方向排版出现频率为 0.1 ） |\n  | mask                    | 如果参数为空，则使用二维遮罩绘制词云。如果 mask 非空，设置的宽高值将被忽略，遮罩形状被 mask 取代。除全白（#FFFFFF）的部分将不会绘制，其余部分会用于绘制词云。如：bg_pic = imread(‘读取一张图片.png’)，背景图片的画布一定要设置为白色（#FFFFFF），然后显示的形状为不是白色的其他颜色。可以用ps工具将自己要显示的形状复制到一个纯白色的画布上再保存。 |\n  | scale                   | 按照比例进行放大画布，如设置为1.5，则长和宽都是原来画布的1.5倍。 |\n  | min_font_size           | 显示的最小的字体大小                                         |\n  | font_step               | 字体步长，如果步长大于1，会加快运算但是可能导致结果出现较大的误差。 |\n  | max_words               | 显示的词的最大个数                                           |\n  | stopwords               | 设置需要屏蔽的词，如果为空，则使用内置的STOPWORDS            |\n  | background_color        | 背景颜色，如background_color=‘white’,背景颜色为白色。        |\n  | max_font_size           | 显示的最大的字体大小                                         |\n  | mode                    | 当参数为“RGBA”并且background_color不为空时，背景为透明。     |\n  | relative_scaling        | 词频和字体大小的关联性                                       |\n  | color_func              | 生成新颜色的函数，如果为空，则使用 self.color_func           |\n  | regexp                  | 使用正则表达式分隔输入的文本                                 |\n  | collocations            | 是否包括两个词的搭配                                         |\n  | colormap                | 给每个单词随机分配颜色，若指定color_func，则忽略该方法。     |\n\n\n\n### 数据准备\n**小说《中国合伙人1.txt》，约3400行**\n[![03jZK1.png](https://s1.ax1x.com/2020/10/03/03jZK1.png)](https://imgchr.com/i/03jZK1)\n\n### 源代码\n\n```python\nimport jieba\nimport jieba.analyse\nimport codecs\nimport re\nfrom collections import Counter\nfrom wordcloud import WordCloud\nimport matplotlib.pyplot as plt\nimport wordcloud\n\n\n# 创建停用词列表\ndef stopwordlist():\n    stopwords = [line.strip() for line in open('../结巴分词/hit_stopwords.txt',encoding='UTF-8').readlines()]\n    return stopwords\n\n\n# 对句子进行中文分词\ndef seg_depart(sentence):\n    print('正在分词')\n    sentence_depart = jieba.cut(sentence.strip())\n    # 创建一个停用词列表\n    stopwords = stopwordlist()\n    # 输出结果为 outstr\n    outstr = ''\n#     去停用词\n    for word in sentence_depart:\n        if word not in stopwords:\n            if word != '\\t':\n                outstr += word\n                outstr += \" \"\n    return outstr\n\n\n\nprint(\"读取文件并生成词云图\")\n\ndef create_word_cloud(file):\n\n    # 读取文件内容\n    content = codecs.open(file,'r','gbk').read()\n  # 去停用词\n    content = seg_depart(content)\n    # 结巴分词\n    wordlist = jieba.cut(content)\n    wl = \" \".join(wordlist)\n\n    print(wl)\n\n    # 配置词云图\n    wc = wordcloud.WordCloud(\n    #     设置背景颜色\n        background_color='white',\n    #     设置最大显示的词数\n        max_words=100,\n    #     设置字体路径\n        font_path = 'C:\\Windows\\Fonts\\msyh.ttc',\n        height=1200,\n        width=1600,\n    #     设置字体最大值\n        max_font_size=300,\n    #     设置有多少种配色方案，即多少种随机生成状态\n        random_state=50,\n    )\n\n    # 生成词云图\n    myword = wc.generate(wl)\n\n    # 展示词云图\n    plt.imshow(myword)\n    plt.axis(\"off\")\n    plt.show()\n\n\n\ncreate_word_cloud(\"中国合伙人1.txt\")\n\n\n```\n\n\n### 生成词云图\n\n[![03jWIU.md.png](https://s1.ax1x.com/2020/10/03/03jWIU.md.png)](https://imgchr.com/i/03jWIU)\n\n","categories":["python","自然语言处理","词云图"],"tags":["python","中文分词","词云图","Jieba分词"]},{"title":"Hello World","url":"/posts/16107/","content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n","categories":[],"tags":[]},{"title":"SFWRTECH 3IT3 Lab #1 Layer 3 and 4 Protocols","url":"/posts/4759/","content":"\nCourse section: SFWRTECH 3IT3:Fundamentals of Networking - SFWRTECH_3IT3_poonh_2205\n\nSFWRTECH 3IT3 – Fundamentals of Networking\nLab #1: Layer 3 and 4 Protocols\nFollowing & Answers Record\n\n<!-- more -->\n\n# VM\n\nDefault gateway : 10.0.2.1\n\nWindows1 IP : 10.0.2.4\nWindows2 IP : 10.0.2.5\nCentOS01 IP : 10.0.2.8 (with httpd)\nCentOS02 IP : 10.0.2.9\n\n## Step 8\n\n```\nipconfig /all\n```\n\n## Step 9\n\n```\nnetsh interface ipv4 set dns \"Ethernet\" static 8.8.8.8 primary\nnetsh interface ipv4 add dns \"Ethernet\" 192.168.1.1\nipconfig /all\n```\n\nDifferences between dynamic and manual IP config:\n- DHCP enabled in dynamic and disabled in manual\n- DHCP server in dynamic is 10.0.2.3 but disappeared in manual\n\n## Step 12\n\nShow ARP cache\n\n```\narp -a\n```\n\nResult:\n\n```\nPhysical Address of 10.0.2.4 : 08-00-27-c8-13-4b\n\nInterface: 10.0.2.4 --- 0x3\ninternet Address | Physical Address | Type         | Purpose\n10.0.2.1           52-54-00-12-35-00  dynamic        Default Gateway\n10.0.2.3           08-00-27-75-7c-58  dynamic        DHCP Server\n10.0.2.5           08-00-27-2b-a4-3e  dynamic        Neighbouring VM\n10.0.2.255         ff-ff-ff-ff-ff-ff  static         Directed Broadcast\n224.0.0.22         01-00-5e-00-00-16  static\n224.0.0.251        01-00-5e-00-00-fb  static\n224.0.0.252        01-00-5e-00-00-fc  static\n255.255.255.255    ff-ff-ff-ff-ff-ff  static         Flooded Broadcast\n\n224.0.0.22 were appeared after browsing a website.\n\nWireshark OUI Lookup Tool: https://www.wireshark.org/tools/oui-lookup.html\n\nOUI for 08-00-27 : PCS Computer Systems GmbH\n```\n\n## Step 13\n\nUsing `Windows1 10.0.2.4` ,\ndelete all entries in ARP cache `arp -d`\n\n```\narp -d\narp -a\nping 10.0.2.5\narp -a\n```\n\nA new entry `10.0.2.5 08-00-27-2b-a4-3e` was created in ARP cache after `ping 10.0.2.5`.\n\nThere is no ARP entry for default gateway because `Windows2 10.0.2.5` is in the same subnet that `Windows1 10.0.2.4` in, so data can be sent directly to neighbours and not to the gateway to handle further.\n\nI can use `ipconfig` command to get the ARP entry for default gateway.\n\n## Step 14\n\nAfter change MAC of `Windows2 10.0.2.5` from `08-00-27-2b-a4-3e` to `08-00-27-11-22-33` and run `arp -a` on `Windows1 10.0.2.4`, the ARP entry of `Windows2 10.0.2.5` is dynamically changed to `08-00-27-11-22-33`. (yes, if I switch Windows1 quickly enough, the MAC is not changed yet)\n\nI ping to `Windows2 10.0.2.5` and receive 4 `Request timed out` after MAC changed.\n\n## Step 15\n\nAfter I select “Turn on Windows Defender Firewall” under the\n“Public network settings” on `Windows2 10.0.2.5`, `Windows1 10.0.2.4` receives 4 `Request timed out` on running `ping 10.0.2.5`.\n\n## Step 19\n\n```\nsu -\nyum -y install nc httpd\nyum -y install nc\n```\n\n## Step 20\n\nCreate `index.html` file\n\n```\n<html><body>Hello World</body></html>\n```\n\nSave to `/var/www/html/index.html`\n\n## Step 21\n\nRun `ifconfig` or `ip addr` on CentOS01, find device `enp0s3` with `inet 10.0.2.8/24`\n\nRun\n```\nfirewall-cmd --zone=public --add-port=80/tcp --permanent\nfirewall-cmd --reload\n```\non CentOS01\n\nRun `ifconfig` or `ip addr` on CentOS02, find device `enp0s3` with `inet 10.0.2.9/24`\n\n## Step 22\n\nStart Apache web server\n\n```\nsystemctl enable httpd.service\nsystemctl start httpd.service\n```\n\n## Step 23\n\nI can see the \"Hello World\" page through `CentOS02 10.0.2.9` by browsing `10.0.2.8`\n\n## Step 24\n\nRun `nc -ul 1234` on `CentOS01 10.0.2.8` and `nc 10.0.2.8 -u 1234` on `CentOS02 10.0.2.9`\n\nThen type `abc` on `CentOS02 10.0.2.9` and press Enter. I receive \"no route to host\".\n\nThen release port number `1234` using `udp` from firewall of `CentOS01 10.0.2.8`\n\n```\nfirewall-cmd --zone=public --add-port=1234/udp --permanent\nfirewall-cmd --reload\n```\n\n## Step 25\n\nIf I first try to send a message from `CentOS01 10.0.2.8`, nothing happens, because UDP protocal is connectionless. The server `CentOS01 10.0.2.8` is just listening to `port 1234` but it does not have connection to the client `CentOS02 10.0.2.9` because the client `CentOS02 10.0.2.9` does not need to build connection with the server `CentOS01 10.0.2.8` very firstly before sending out messages.\n\n## Step 26\n\nRun `nc -l 5678` on `CentOS01 10.0.2.8` and `nc 10.0.2.8 5678` on `CentOS02 10.0.2.9`.\n\nThis returns \"no route to host\" again because `port 5678` is not released from the firewall. A TCP `RST` flag is sent back to `CentOS02 10.0.2.9` so `CentOS02 10.0.2.9` knows the connection is aborted.\n\n## Step 27\n\nRelease port number `5678` using `tcp` from firewall of `CentOS01 10.0.2.8`\n\n```\nfirewall-cmd --zone=public --add-port=5678/tcp --permanent\nfirewall-cmd --reload\n```\n\n## Step 28\n\nI first try to send a message from the server `CentOS01 10.0.2.8`, and the client `CentOS02 10.0.2.9` gets the message because both sides must have connection built under TCP protocal before any messages sent.\n\nWhen I press `CTRL + C` on the client `CentOS02 10.0.2.9`, the server `CentOS01 10.0.2.8` is also down because the client `CentOS02 10.0.2.9` sends out a `FIN` flag and expects to end the connection. The server `CentOS01 10.0.2.8` sends a `FIN` flag again with a `ACK` flag for confirming, and the client `CentOS02 10.0.2.9` confirms that. TCP protocal only allows point to point transport due to one connection.\n\n## Step 29\n\nRun `route -n` on `CentOS01 10.0.2.8` to identify the default gateway.\n\nRun `cat /etc/resolv.conf` on `CentOS01 10.0.2.8` to check DNS config.\n\n## Post-Lab Questions\n\nAn ARP cache may contain multiple entries with the same MAC address, even though the IP addresses listed are different. This commonly occurs in some networks. Describe the configuration of network devices that could result in this behaviour.\n\nAnswer:\n1. A network with hosts that have a NIC binded with multiple IP addresses\n2. Web server binded with IP addresses, so that the website can be surfed through multiple IP addresses\n\nIn classful IP addressing, what classful network would your Windows and CentOS IP addresses normally belong to? What “class” do they actually belong to, and why? Write the network address for the VMs in CIDR notation. What is the maximum number of hosts that can be configured in this subnet?\n\nAnswer:\nSubnet Mask is `255.255.255.0` so it is actually a `Class C` => Network Address `10.0.2.0/24`. Number of possible hosts: `2 ^ 8 - 2 = 254`.\n\nHow could a computer detect an IP address conflict in the network when starting up, before it finishes loading its own IP network configuration? In other words, how could a computer determine whether an IP address is already in use on the network before it attempts to configure its network interface using the same address (which would then result in a conflict)?\n\nAnswer:\n1. Ask DHCP server to get a valid IP address.\n2. Ping all possible IP addresses to see which is not in use.\n","categories":["Lab"],"tags":["SFWRTECH 3IT3"]},{"title":"数据结构之栈 Stack 和队列 Queue","url":"/posts/3164/","content":"\n栈（Stack）和队列（Queue），了解栈和队列的基础知识，学习它们的基础应用。\n\n<!-- more -->\n\n# 栈Stack\n\n栈Stack是一种线性结构，是线性表的一种具体形式。栈这种后进先出（Last In First Out，LIFO）的应用非常广泛，例如网页的前进后退功能，编辑器的后一步前一步功能，方法调用时的函数栈等等。\n\n栈Stack的特性：\n- 栈的元素必须“后进先出”\n- 栈的操作只能于线性表表尾进行\n- 栈的表尾被称为栈顶（Top），栈的表头被称为栈底（bottom）\n\n栈Stack的操作：\n- 插入操作（Push），进栈\n- 删除操作（Pop），出栈\n\n![Stack Pop And Push](/gallery/data-structure-stack.png)\n\n## 栈的顺序存储结构\n\n应用顺序存储结构的栈，元素必须从开始表尾进行操作，从而节省下元素前移补充位置的操作，而不像链式结构可以从表头操作。当栈初始化时，不含有任何数据的栈被称为空栈，此时栈顶就是栈底。\n\n## 栈的链式存储结构\n\n**栈一般使用顺序存储结构**实现。使用链式存储结构时，栈底为链表头部，栈顶为链表尾部。\n\n## 使用栈来进行进制转换\n\n例子，使用顺序存储结构的栈计算把`8`位数的二进制数转换成十进制数。\n``` js Javascript\nlet stack = [1, 1, 0, 0, 1, 0, 0, 1]; // 11001001 (2)\n// 1*2^0 + 0*2^1 + 0*2^2 + 1*2^3 + 0*2^4 + 0*2^5 + 1*2^6 + 1*2^7\nlet result = 0;\nlet power = 0; // start with power of 0 in first digit\nwhile (stack.length) {\n  result += stack.pop() * Math.pow(2, power++);\n}\n// result = 201 (10)\n\n// Faster way in JavaScript\nparseInt('11001001', 2).toString(10);\n```\n\n例子，使用顺序存储结构的栈计算把`8`位数的二进制数转换成八进制数。\n``` js Javascript\nlet stack = [1, 1, 0, 0, 1, 0, 0, 1]; // 11001001 (2)\n// 001=>1, 001=>1, 11=>3, final 311 (8)\nlet temp = [];\nwhile (stack.length) {\n  // 3-digit pair\n  let d0 = stack.pop() | 0;\n  let d1 = (stack.pop() | 0) * 2;\n  let d2 = (stack.pop() | 0) * 4;\n  let D = d0 + d1 + d2;\n  temp.push(D);\n}\nlet result = temp.reverse().join(''); // result = 311 (8)\ntemp = parseInt(result, 8); // 201 (10)\n\n// Faster way in JavaScript\nparseInt('11001001', 2).toString(8);\n```\n\n例子，使用顺序存储结构的栈计算把`8`位数的二进制数转换成十六进制数。\n``` js Javascript\nlet stack = [1, 1, 0, 0, 1, 0, 0, 1]; // 11001001 (2)\n// 1001=>9, 1100=>C, final C9 (16)\nlet letters = ['a', 'b', 'c', 'd', 'e', 'f'];\nlet temp = [];\nwhile (stack.length) {\n  // 4-digit pair\n  let d0 = stack.pop() | 0;\n  let d1 = (stack.pop() | 0) * 2;\n  let d2 = (stack.pop() | 0) * 4;\n  let d3 = (stack.pop() | 0) * 8;\n  let D = d0 + d1 + d2 + d3;\n  temp.push(D > 9 ? letters[D % 10] : D);\n}\nlet result = temp.reverse().join(''); // result = C9 (16)\ntemp = parseInt(result, 16); // 201 (10)\n\n// Faster way in JavaScript\nparseInt('11001001', 2).toString(16);\n```\n\n## 使用栈来计算普通数学表达式\n\n计算`1 + (2 - 3 * 4.5) / 6`;\n\n第一步，转换中缀表达式到后缀表达式（逆波兰表达式）。\n\n``` js JavaScript\n// Expected Result: 1 2 3 4.5 * - 6 / +\nlet input = '1 + (2 - 3 * 4.5) / 6';\ninput = input.replace(/\\s/g, ''); // 1+(2-3*4.5)/6\nlet numbers = input.split(/[\\+\\-\\*\\/\\(\\)]+/);\n// [\"1\", \"2\", \"3\", \"4.5\", \"6\"]\nnumbers.forEach((num, i) => {\n  input = input.replace(num, i); // 0+(1-2*3)/4\n});\nlet result = '';\nlet stack = [];\nfor(let i = 0; i < input.length; i++) {\n  let value = input.charAt(i);\n  if (/[\\+\\-\\*\\/\\(\\)]/.test(value)) {\n    if (value === ')') {\n      let symbol = stack.pop();\n      while (symbol !== '(') {\n        result += `${symbol} `;\n        symbol = stack.pop();\n      }\n    } else {\n      if (stack.length > 0) {\n        let symbol = stack.pop();\n        if (/\\*\\//.test(symbol) && !/\\*\\//.test(value)) {\n          result += `${symbol} `;\n        } else {\n          stack.push(symbol);\n        }\n      }\n      stack.push(value);\n    }\n  } else {\n    result += `${numbers[value]} `;\n  }\n}\nwhile (stack.length > 0) {\n  result += `${stack.pop()} `;\n}\n\n// result = \"1 2 3 4.5 * - 6 / + \"\n```\n\n第二步，计算转换后的逆波兰表达式，最后输出结果。\n\n``` js JavaScript\n// Expected Result: -0.9166666666666667\nlet input = '1 2 3 4.5 * - 6 / + ';\ninput = input.trim().split(/\\s/);\n// [\"1\", \"2\", \"3\", \"4.5\", \"*\", \"-\", \"6\", \"/\", \"+\"]\nlet stack = [];\nlet result = 0;\nfor (let i = 0; i < input.length; i++) {\n  let value = input[i];\n  if (isNaN(value)) {\n    let backNum = stack.pop();\n    let frontNum = stack.pop();\n    let subResult = 0;\n    if (value === '+') {\n      subResult = frontNum + backNum;\n    } else if (value === '-') {\n      subResult = frontNum - backNum;\n    } else if (value === '*') {\n      subResult = frontNum * backNum;\n    } else if (value === '/') {\n      if (backNum === 0) {\n        throw new Error('Divisor cannot be 0');\n      }\n      subResult = frontNum / backNum;\n    } else {\n      throw new Error('Operator must be \"+\", \"-\", \"*\" or \"/\"');\n    }\n    if (stack.length > 0) {\n      stack.push(subResult);\n    } else {\n      result = subResult;\n    }\n  } else {\n    stack.push(parseFloat(value));\n  }\n}\n\n// result = -0.9166666666666667\n```\n\n# 队列Queue\n\n队列Queue是一种线性结构，也是线性表的一种具体形式。队列这种先进先出（First In First Out，FIFO）的应用也非常广泛，是只允许在一段进行插入操作，而在另一端进行删除操作的线性表，例如输入缓冲功能，任务顺序加载功能等等。\n\n队列可以用顺序储存结构实现，但是跟栈相反，**队列一般都用链式储存结构**实现。\n\n队列Queue的特性：\n- 队列的元素必须“后进先出”\n- 队列的操作只能于线性表头尾进行\n\n队列Queue的操作：\n- 插入操作（Offer），进队列\n- 删除操作（Poll），出队列\n\n![Queue Offer And Poll](/gallery/data-structure-queue.png)\n\n> 本文参考：\n> [【C语言描述】《数据结构和算法》（小甲鱼）](https://www.bilibili.com/video/BV1jW411K7yg)","categories":["数据结构与算法"],"tags":["Stack","Queue"]},{"title":"数据结构之线性表 List","url":"/posts/6004/","content":"\n线性表（List），了解线性表的基础知识，认识一下线性表的种类。\n\n<!-- more -->\n\n# 线性表List\n\n线性表（List）：由另个或多个元素组成的有限序列。**元素是有序的，可以被排列的**。在有序结构中，某个元素`ai`前面的元素`ai-1`称为**前驱元素**，后面的元素`ai+1`称为**后继元素**。在Java语言中，数组（ArrayList）和链表（Linked List）都属于线性表。其中数组使用了顺序结构，而链表使用了链式结构。\n\n线性表的数据对象集合为`{a1,a2,...,an-1,an}`，每个元素的类型均为`DataType`。**数据元素之间的关系是一对一的关系。**其中，除第一个元素`a1`外，每个元素有且只有一个直接前驱元素，除最后一个元素`an`外，每个元素有且只有一个直接后继元素。\n\n# 线性表伪代码\n\n```\nADT 线性表（List）\nData\n  数据对象集合 {a1,a2,...,an-1,an}\nOperation\n  init(*L)：初始化空线性表L\n  isEmpty(L)：判断线性表是否为空\n  clear(*L)：清空线性表\n  getElement(L,i,*e)：将线性表L中第i个元素返回给e\n  elementAt(L,e)：线性表L中查找与e相等的元素，返回元素的位置\n  insert(*L,i,e)：线性表L中第i个位置插入新元素e\n  delete(*L,i,*e)：删除线性表L中第i个位置元素，并返回该元素给e\n  length(L)：返回线性表L的元数个数\nendADT\n```\n\n# 线性表的顺序存储结构\n\n线性表的顺序存储结构封装需要3个属性：\n\n- 存储空间初始位置，数组指针\n- 线性表的最大长度，指存储空间总长度，初始化后不变\n- 线性表的当前长度，指表中元素数量，大于等于0，小于表的最大长度\n\n## 顺序存储结构的地址计算方法\n\n**注：`i`从“1”开始**\n\n假设每个元素类型的`DataType`都需要占用`c`个储存单位（字节），那么线性表中第`i+1`个元素和第`i`个元素的存储位置的关系是（LOC为获得存储位置的函数）：\n\n`LOC(ai+1) = LOC(ai) + c`\n\n所以找第`i`个元素`ai`的储存位置可以又线性表初始指针指向的`a1`推算出：\n\n**`LOC(ai) = LOC(a1) + (i-1) * c`**\n\n通过这个公式，计算出线性表中任意位置的地址，所用的时间都是相同的，那么他的存储时间性能就是`O(1)`，**这种结构通常被称为随机存储结构。**\n\n# 线性表的链式存储结构\n\n顺序存储结构最大的缺点，插入和删除需要移动大量元素，从而保持表中元素邻居的关系；链式存储结构通过携带后继元素的存储地址就解决了这个缺点。\n\n链式存储结构的线性表中元素称为“存储映像”，也称为“节点（Node）”。每个节点都是由两部分组成：\n\n- 数据域：储存数据元素信息的域\n- 指针域：存储直接后继元素地址的域\n\n## 单链表\n\n`n`个节点链接成一个链表，即为线性表`(a1,a2,...,an-1,an)`的链式存储结构。因为此链表的每个节点中只包含一个指针域，所以叫做单链表。\n\n![单链表图示](/gallery/data-structure-linked-list-normal.png)\n\n单链表必须有一个头部加上0到多个节点。头指针是链表指向第一个节点的指针，如果链表有头结点，则头指针指向头结点。头结点携带第一个元素的节点指针，放在第一个节点之前，其数据域一般无意义，但也可以存放链表的长度。头结点不是必须的，但是头结点可以放一些对列表有用的变量。\n\n尾指针是指向单链表的最后一个节点的指针，这个指针不是必须的，但是尾指针有好处，比如需要在尾部插入新节点。\n\n**若线性表需要频繁查找，很少进行插入和删除操作是，宜采用顺序存储结构。**\n\n**若需要频繁插入和删除时，宜采用单链表结构。**\n\n## 静态链表\n\n在内存中建立一个数组，在数组最大长度内的空间中再建立一个链表，这种链表就是静态链表。静态链表通过“游标（Cursor）”指向后继元素所处数组中的“下标（Index）”。下图为静态链表转普通链表，最大长度为`100`，第一个元素游标指向备用链表的头节点（既当前链表尾节点的游标，也是尾指针），最后一个元素游标指向当前链表头节点。\n\n![静态链表转普通链表](/gallery/data-structure-linked-list-static-to-normal.png)\n\n- 数组中第一个和最后一个元素不存放数据\n- 未使用的数组元素被称为备用链表\n- 数组第一个元素，即`Index = 0`的元素的游标（Cursor）存放备用链表的第一个节点的下标\n- 数组最后一个元素，即`Index = MAX_SIZE-1`的元素的游标（Cursor）存放当前链表的第一个节点的下标\n- 静态链表初始化时，`Index = 0`的元素的游标应从`1`开始，而`Index = MAX_SIZE-1`的元素的游标则是`0`，表示空链表\n\n## 循环链表\n\n在单链表中，如果不从头结点出发，就无法访问到全部节点。循环链表就解决了这个问题。只要有链表中某一节点的指针，就能跑完全部节点。当表为空时，头部后继指针指向头部本身。\n\n**循环链表所用的方法就是把尾节点的空指针指向头节点，使单链表形成一个环，这种头尾相接的单链表被称为单循环链表，简称循环链表。**\n\n原单链表判断尾节点用`node.next === null ?`，现在则是用`node.next === head ?`。\n\n## 双向链表\n\n对比单链表，双向链表的节点有两个指针：前驱指针和后继指针。双向列表允许从尾部往回跑。当表为空时，头部前驱指针和后继指针都指向头部本身。\n\n# 找单链表中间的节点的方法\n\n利用快慢指针原理：设置两个指针`*search`和`*middle`都指向单链表的头结点。其中`*search`的移动速度是`*middle`的2倍。当`*search`指向尾节点时，`*middle`正好就在中间。\n\n在一个长度为100的单链表中，当`*search`指向第100个节点时，`*middle`指向第50个节点。\n\n在一个长度为101的单链表中，当`*search`指向102（即超出长度）时，`*middle`指向第51个节点，正好在中间。\n\n# 判断一个链表是否有环\n\n方法一：设置两个指针`*q`和`*b`。`*q`一直在走的情况下，每遇到一个节点，`*b`就从新从头结点开始走。如果`*q`所在当前步数等于`*b`从头开始数的步数，则`*q`继续往前走一步，而`*b`从新走。如果`*q`所在当前步数不等于`*b`的从头开始数的步数，则存在环。这种方法可以找到环所在节点。\n\n方法二：设置两个指针`*q`和`*b`都指向单链表的头结点。其中`*q`的移动速度是`*b`的2倍，若在某个时候`*q == *b`，则存在环。一般偶数量节点的单循环链表跑两次后`*q == *b`。\n\n> 本文参考：\n> [【C语言描述】《数据结构和算法》（小甲鱼）](https://www.bilibili.com/video/BV1jW411K7yg)","categories":["数据结构与算法"],"tags":["线性表","List"]},{"title":"算法之基础","url":"/posts/2915/","content":"\n算法基础，了解算法的基础知识，算法的种类，知道什么是好算法。\n\n<!-- more -->\n\n# 算法特性\n\n- **输入**：可以有零个或多个参数\n- **输出**：必须有一个或多个结果\n- **有穷性**：算法必须会结束，没有无限循环\n- **确定性**：有唯一结果\n- **可行性**：算法每一步都能通过执行有限次数完成\n  \n# 算法设计要求\n\n- **正确性**：算法至少具有输入、输出和过程明确的加工处理，正确反映问题的需求，最后得到期望的答案\n  - 算法程序没有语法错误\n  - 算法程序对于合法输入能产生期望的答案\n  - 算法程序对于非法输入能产生警告和提示\n  - 算法程序对于故意掉难得测试输入都能产生期望的结果\n- **可读性**：算法便于阅读、理解和交流\n- **健壮性**：能够处理异常、崩溃或莫名其妙的结果\n- **高时间效率和低存储量**：算法要考虑处理速度和内存用量\n  \n# 算法效率度量方法\n\n- 事后统计方法：通过执行多个输入测试，记录执行时间平均值\n- 事前估算方法：通过统计方法对算法进行估算，涉及以下因素\n  1. 算法策略，**例子使用公式或者循环等**\n  2. 编译后的代码质量，**基础操作的次数统计**\n  3. 问题的输入规模，**例子数值大小或元素数量等**\n  4. 机器执行指令的速度，**硬件性能**\n\n**算法基础种类分别有：`1`、`n`、`n*n`。**\n\n一般使用公式或瀑布式条件判断的算法策略属于`1`；使用单个循环的属于`n`；使用嵌套循环的属于`n*n`。3种算法中往往常数算法`1`要优于`n`和`n*n`。给以下基础操作次数公式分类：\n- `1`：`3`、`5`、`9`等\n- `n`：`n`、`n+1`、`2n+3`等\n- `n*n`：`n^2`、`n^2+5`、`2n^3+1`等\n\n**一般判断算法好坏，更应该关注函数公式的主项：指数最高项。**\n比如算法`2n^2+n+3`对比算法`n^3+2n+1`，因为`2n^2`指数低于`n^3`，所以算法`2n^2+n+3`优于算法`n^3+2n+1`。\n\n## 怎么分析一个算法的输入时间？\n\n- 抽象算法：去除算法中循环的外包装、条件的判断、变量的声明、打印输出等操作\n- 指令计数：统计关联的输入模式下基础操作的数量\n\n## 求和1-100的算法例子分析\n\n以下*算法一*，算法策略使用`循环`，编译后的代码质量为`n`次，问题的输入规模`100`，机器执行指令的速度取决于算法运行所在计算机。\n\n``` js JavaScript 算法一\nlet sum = 0, i = 1, n = 100;\nfor (; i <= n; i++) {\n  sum += i;                  // 执行 n 次\n}\n```\n\n以下*算法二*，算法策略使用`公式`，编译后的代码质量为`1`次，问题的输入规模`100`，机器执行指令的速度取决于算法运行所在计算机。\n\n``` js JavaScript 算法二\nlet sum = 0, i = 1, n = 100;\nsum = (i + n) * n  / 2;      // 执行 1 次\n```\n\n对比以上算法，它们的输入规模都是`100`，在同一计算机运行的情况下，**算法一**的基础操作次数受输入规模的影响，造成工作量超出**算法二**，**所以算法二效率更高**。\n\n## 求和3x3表格内数值的例子分析\n\n以下*表格遍历例子*，算法策略使用`嵌套的循环`，编译后的代码质量为`n^2`次，问题的输入规模`3x3`，机器执行指令的速度取决于算法运行所在计算机。\n\n``` js JavaScript 表格遍历求和例子\nlet sum = 0, \n    table = [\n      [1, 2, 3],\n      [4, 5, 6],\n      [7, 8, 9],\n    ];\nfor (let i = 0; i <= table.length; i++) {\n  for (let j = 0; j <= table[i].length; j++) {\n    sum += table[i][j];      // 执行 n^2 次\n  }\n}\n```\n\n以上算法，它根据表格的大小，基础操作的数量是以指数上升的，**所以`3x3`的表格内数值总和计算一共有基础操作`3^2`等于9次**。\n\n# 用大O记法表示算法时间复杂度\n\n复杂度分为：**时间复杂度**或**空间复杂度**\n**一般计算“复杂度”是指“时间复杂度”，而不是空间复杂度，目前主流还是时间复杂度，不求用内存换取时间。**\n\n**T(n) = O(f(n))**，`f(n)`为算法的函数或入口，随着输入规模`n`的增长，`T(n)`增长最慢的算法为最优算法。因为以下原因：\n\n**基础操作数量 = 时间**\n\n所以当`n`翻倍时，*基础操作数量*增长越少，花费的*时间*越少。\n\n上面用到的三个求和算法例子，如果用大O表示算法的时间复杂度分别为`O(1)`、`O(n)`、`O(n^2)`。\n\n**大O记法表示时间的增长率**\n\n- `O(1)`：增长率不变\n- `O(n)`：增长率倍数增长\n- `O(n^2)`：增长率指数增长\n\n## 推导大O阶方法\n\n用一下方法来推导`5`、`2n+3`、`n(n+1)/2`和`O(logn)`的大O阶：\n\n1. 用常数1取代所有加法常数\n2. 只保留最高阶项\n3. 最高阶项不是1的话，去除这个项相乘的常数\n\n`5` => `O(1)`，\n`2n+3` => `O(n)`，\n`n(n+1)/2` => `O(n^2)`\n\n一面这个例子的话就是`O(logn)`：\n\n``` js JavaScript\nlet i = 1, n = 100;\nwhile (i < n) {\n  i *= 2; // 2^x = n，那么 x = log(2)n，x为循环次数\n}\n```\n\n## 常见的时间复杂度\n\n| 例子 | 时间复杂度 | 术语 |\n| :---: | :---: | :---: |\n| 5 | O(1) | 常数阶 |\n| 3n+4 | O(n) | 线性阶 |\n| 3n^2+4n+5 | O(n^2) | 平方阶 |\n| 3log(2)n+4 | O(logn) | 对数阶 |\n| 2n+3nlog(2)n+14 | O(nlogn) | nlogn阶 |\n| n^3+2n^2+4n+6 | O(n^3) | 立方阶 |\n| 2^n | O(2^n) | 指数阶 |\n\n时间复杂度对比：\n**`O(1)` < `O(logn)` < `O(n)` < `O(nlogn)` < `O(n^2)` < `O(n^3)` < `O(2^n)` < `O(n!)` < `O(n^n)`**\n\n> 本文参考：\n> [【C语言描述】《数据结构和算法》（小甲鱼）](https://www.bilibili.com/video/BV1jW411K7yg)","categories":["数据结构与算法"],"tags":["基础","Big O"]},{"title":"数据结构之基础","url":"/posts/46208/","content":"\n数据结构基础，了解数据结构的分类，认识一下抽象数据类。\n\n<!-- more -->\n\n# 顺序结构\n\n**内存中元素紧挨在一起的数据结构为顺序结构**。在C语言中，声明一个整数结构类型长度为`5`的数组时，内存中会留出5个整数长度的连续空间用于存储数组。实际上，数组的指针可以说是指向在数组中的第一个元素。当要修改第4个元素时，计算机是找到了数组指针地址，跳跃3个整数长度的距离，从而找到第4个元素的位置。\n\n# 链式结构\n\n**内存中元素可连续也可不连续，通过指针寻找和连接元素的数据结构为链式结构**。在Java语言中，链表（Linked List）和树（Tree）都属于链式结构。他们属于抽象的结构类型，类型所包含的元素被称为节点（Node）。链表节点中的值可以为整数类、浮点类、字符串等，包括抽象数据类；但链表节点中还会包含有节点的一个后继元素指针。树节点对比链表节点的不同在于树节点中可以包含有多个后继元素指针。总结起来就是**链式结构节点在内存中连续摆放不是必须的**，当计算机查找某个节点时，会走遍目标节点前的所有节点，从而顺着第一个节点的指针找到目标指针。\n\n# 比较顺序结构和链式结构\n\n![顺序结构和链式结构在内存中的不同](/gallery/data-structure-random-linked-ram.png)\n\n- 顺序结构在内存中有固定最大长度，而链式结构在内存中没有，所以在流动数据多的情况下，链式结构对空间利用更灵活。\n- 顺序结构在内存中是元素之间是连续的，而链式结构在内存中很可能是不连续的，所以在查找元素时，通过地址计算公式查找，顺序结构的效率更高。\n- 在首部添加元素或删除中间某个元素的情况下，链式结构的效率会更高，因为对比顺序结构，链式结构不需要重新排列。\n- 顺序结构最大长度难以确定的情况下，会产生太多的储存空间“碎片”，而链式结构原本就是“碎片化”的。\n\n# C语言数据类型\n\n原子/基本类型：short, int, long, float, double, char\n结构/构造类型：数组, struct, union, enum\n其他：指针，空（void）\n\n# 抽象数据类型（Abstract Data Type）\n\n区别于基本数据类型，基本数据类型有设定数据占用空间的极限、数据表示的方式和内存中结构的特性；抽象数据类型基于基本数据类型形成更复杂的数据类型，例如链表（Linked List）和树（Tree）都属于抽象数据类。颜色（Color）、坐标（Point）等结构类也都属于抽象数据类。\n\n> 所谓抽象数据类型就是把数据类型和相关操作捆绑在一起。\n\nColor抽象数据类:\n由Red、Green和Blue，3个范围为0-255的整数值表示颜色范围，加上一个范围为0-1的浮点型Alpha数值表示透明度。\n\nPoint抽象数据类:\n由x、y和z，3个整数值表示三维空间中的坐标。\n\n# 抽象数据类型伪代码\n\n```\nADT 抽象数据类型名\nData\n  数据元素之间逻辑关系的定义\nOperation\n  操作\nendADT\n```\n\n> 本文参考：\n> [【C语言描述】《数据结构和算法》（小甲鱼）](https://www.bilibili.com/video/BV1jW411K7yg)","categories":["数据结构与算法"],"tags":["基础","抽象数据类"]},{"title":"Hexo 主题 Mustom 使用指南（对应主题 1.0 版）","url":"/posts/49651/","content":"\n- 本主题[Mustom](//github.com/jinyaoMa/hexo-theme-mustom)是我参考了卡片式和窗口展示的样式设计的Hexo主题。\n- 本主题通过大量的replaceWith函数和PJAX来加载，而且用了Live2D的插件，初始加载时回流特别厉害。\n- 本主题可以衍生一个CSS的框架，但是作者本人目前还是在给每个组件都弄一个单独的样式表。\n- 本主题把各类资源文件都分门别类了，在以后添加内容方面应该还是较方便的。\n\n<!-- more -->\n\n# Hexo根目录结构\n\n**注：主题文件可以下载[本站](//github.com/jinyaoMa/ma-jinyao.cn)所有源代码后，通过复制粘贴`themes/mustom`文件夹获得，或者下载[Mustom](//github.com/jinyaoMa/hexo-theme-mustom)所有源代码获得**\n**注：以下文件及文件夹都是使用Mustom主题必要的结构**\n\n先来看看[本站](//github.com/jinyaoMa/ma-jinyao.cn)的根目录结构。\n\n```\n├─scaffolds    : 模板\n├─source       : 内容资源文件夹\n├─themes       : 下载的主题放这里\n├─package.json : 里面可以看我都用了什么没有魔改过的Hexo插件\n├─_config.yml  : 根配置文件\n```\n\n这就是一个普通Hexo建站的初始结构。这里主要讲下，**使用我的Mustom主题时，可以使用`scaffolds`里我的模板，里面包含了必要的front-matter变量。可以复制粘贴整个`scaffolds`文件去覆盖原本的文件夹。推荐按照[本站](//github.com/jinyaoMa/ma-jinyao.cn)里的`package.json`来安装依赖，因为基本上安装的依赖都是用于优化和兼容。可以复制粘贴本站的`package.json`去替换原本的文件，之后运行命令`npm i`安装依赖。之后所有的例子默认都使用了我的模板和依赖之后的操作。**\n\n# _config.yml根配置文件\n\n**注：使用本主题的你可以在上面添加变量和修改变量的值，但是最好不要删除某一个变量，你可以留个空字符串**\n**可以在复制粘贴以下配置之后，通过网站效果慢慢改**\n\n``` yml\n# Hexo Configuration\n## Docs: https://hexo.io/docs/configuration.html\n## Source: https://github.com/hexojs/hexo/\n\n# Site\ntitle: \"耀 の 个人网站 | Mark の Personal Website\"\ndescription: \"耀の个人网站, 耀的个人网站, Mark の Personal Website, Mark's Personal Website, 耀的部落阁, 耀の部落阁, jinyaoMa, Mustom, Hexo\"\nauthor: jinyaoMa ( 耀 / Mark )\nyear: 2019 # 建站年\n\n# URL\n## If your site is put in a subdirectory, set url as 'http://yoursite.com/child' and root as '/child/'\nurl: https://ma-jinyao.cn\nroot: /\n\n# Directory\nsource_dir: source\npublic_dir: docs # 方便使用Github Page\ntag_dir: tags\narchive_dir: archives\ncategory_dir: categories\ncode_dir: code # markdown使用include_code标签\nskip_render:\n  - \"code/*.*\" # 排除code_dir\n  - \"extension/**/*.html\" # 排除extension\n  - \"*.html\" # 如果在在主目录source文件夹里放了搜索引擎验证的.html文件\n  - \"CNAME\" # 如果在在主目录source文件夹里放了CNAME文件\n\n# Writing\nnew_post_name: :title.md # File name of new posts\ndefault_layout: post\ntitlecase: false # Transform title into titlecase\nexternal_link:\n  enable: true # Open external links in new tab\n  field: site # Apply to the whole site\n  exclude: \"\"\nfilename_case: 0\nrender_drafts: false\npost_asset_folder: false\nrelative_link: false\nfuture: true\nhighlight:\n  enable: true\n  line_number: true\n  auto_detect: false\n  tab_replace: \"  \"\n  wrap: true\n  hljs: false\n\n# Date / Time format\n## Hexo uses Moment.js to parse and display date\n## You can customize the date format as defined in\n## http://momentjs.com/docs/#/displaying/format/\ndate_format: YYYY-MM-DD\ntime_format: HH:mm:ss\n## Use post's date for updated date unless set in front-matter\nuse_date_for_updated: false\n\n# Extensions\n## Plugins: https://hexo.io/plugins/\n## Themes: https://hexo.io/themes/\ntheme: mustom\n\n# Deployment\n## Docs: https://hexo.io/docs/deployment.html\ndeploy:\n  - type: baidu_url_submitter\n  - type: git\n    repo:\n\nall_minifier: true # 如果装了 hexo-all-minifier\nmarkdown: # 如果换了原装 hexo-renderer-marked, 用了 hexo-renderer-markdown-it\n  render:\n    html: true\n    xhtmlOut: false\n    breaks: true\n    linkify: true\n    typographer: true\n    quotes: '“”‘’'\n  plugins:\n    - markdown-it-abbr\n    - markdown-it-footnote\n    - markdown-it-ins\n    - markdown-it-sub\n    - markdown-it-sup\n  anchors:\n    level: 1\n    collisionSuffix: 'v'\n    permalink: true\n    permalinkClass: headerlink\n    permalinkSide: 'left'\n    permalinkSymbol: ''\nnofollow: # 如果装了 hexo-filter-nofollow\n  enable: true\n  field: post\nsitemap: # 如果装了 hexo-generator-sitemap\n  path: sitemap.xml\n  rel: true\nautoprefixer: # 如果装了 hexo-autoprefixer\n  exclude:\n    - \"*.min.css\"\n  overrideBrowserslist:\n    - \"last 2 versions\"\nbabelify: # 如果装了 hexo-renderer-babelify + @babel/preset-env\n  presets:\n    - \"@babel/preset-env\"\n  sourceMaps: false\nmathjax: # 如果装了 hexo-filter-mathjax\n  tags: none # or 'ams' or 'all'\n  single_dollars: true # enable single dollar signs as in-line math delimiters\n  cjk_width: 0.9 # relative CJK char width\n  normal_width: 0.6 # relative normal (monospace) width\n\nignore:\n  - \"**/source/asset/js/common/*.js\" # 如果装了 hexo-renderer-babelify\n  - \"**/source/asset/js/part/*.js\" # 如果装了 hexo-renderer-babelify\n  - \"**/source/asset/js/plugin/!(L2Dwidget.0.min.js)\" # 如果装了 hexo-renderer-babelify\n\n# 百度主动推送\nbaidu_url_submit:\n  count: 1000 # 提交最新的一个链接\n  host: ma-jinyao.cn # 在百度站长平台中注册的域名\n  token: \"\" # 请注意这是您的秘钥， 所以请不要把博客源代码发布在公众仓库里!\n  path: baidu_urls.txt # 文本文档的地址， 新链接会保存在此文本文档里\n\nbaidu_translate: # 用于划词翻译组件\n  appid: \"\"\n  appkey: \"\"\n\nvaline: # 用于评论组件\n  appid: \"\"\n  appkey: \"\"\n\n# 搜索引擎验证\ngoogle_site_verification: \"\"\nbaidu_site_verification: \"\"\n```\n\n# themes/mustom目录结构\n\n接下来看看[themes/mustom](//github.com/jinyaoMa/ma-jinyao.cn/tree/master/themes/mustom)的目录结构。\n\n```\n├─_config.yml : 主题配置文件，改菜单、改图标、改皮肤、改音乐/一言组件配置、新增组件时涉及\n├─source : 主题资源文件夹\n|   ├─browser.ejs : 不用babelify时旧浏览器会重定向到这个页面\n|   ├─robots.txt\n|   ├─sw.tpl : pwa需要加载的service worker模板\n|   ├─asset\n|   |   ├─part : 所有组件模板文件放这\n|   |   |  ├─audioplayer.ejs\n|   |   |  ├─brand.ejs\n|   |   |  ├─codelib.ejs\n|   |   |  ├─comment.ejs\n|   |   |  ├─extension.ejs\n|   |   |  ├─footer.ejs\n|   |   |  ├─gallery.ejs\n|   |   |  ├─goingto.ejs\n|   |   |  ├─hitokoto.ejs\n|   |   |  ├─menus.ejs\n|   |   |  ├─page.ejs\n|   |   |  ├─panels.ejs\n|   |   |  ├─pather.ejs\n|   |   |  ├─post.ejs\n|   |   |  ├─recentposts.ejs\n|   |   |  ├─records.ejs\n|   |   |  ├─search.ejs\n|   |   |  ├─settings.ejs\n|   |   |  ├─sitename.ejs\n|   |   |  ├─skin.ejs\n|   |   |  ├─timeline.ejs\n|   |   |  ├─toc.ejs\n|   |   |  ├─translater.ejs\n|   |   |  ├─xaside.ejs\n|   |   |  ├─xcanvas.ejs\n|   |   |  ├─xdrawer.ejs\n|   |   |  └xsearch.ejs\n|   |   ├─live2d : Live2D的文件放这\n|   |   |   ├─haruto.model.json\n|   |   |   ├─haruto.physics.json\n|   |   |   ├─mtn\n|   |   |   |  ├─01.mtn\n|   |   |   |  ├─02.mtn\n|   |   |   |  ├─03.mtn\n|   |   |   |  ├─04.mtn\n|   |   |   |  ├─05.mtn\n|   |   |   |  ├─06.mtn\n|   |   |   |  ├─07.mtn\n|   |   |   |  ├─08.mtn\n|   |   |   |  ├─09.mtn\n|   |   |   |  └idle_02.mtn\n|   |   |   ├─moc\n|   |   |   |  ├─haruto.moc\n|   |   |   |  ├─haruto.2048\n|   |   |   |  |      └texture_00.png\n|   |   ├─lang : 所有的语言界面资源文件放这\n|   |   |  ├─en.yml : 英文\n|   |   |  └zh-cn.yml : 中文\n|   |   ├─js : 所有的JS资源文件放这\n|   |   | ├─main.js : 管理所有资源的加载和程序\n|   |   | ├─nomodule.js : 不使用babelify时用得到的旧浏览器重定向\n|   |   | ├─plugin : 所有第三方JS插件模块\n|   |   | |   ├─APlayer.min.js\n|   |   | |   ├─av-min.js\n|   |   | |   ├─evanyou.js\n|   |   | |   ├─L2Dwidget.0.min.js\n|   |   | |   ├─L2Dwidget.min.js\n|   |   | |   ├─md5.min.js\n|   |   | |   ├─Meting.min.js\n|   |   | |   ├─socialShare.min.js\n|   |   | |   └Valine.min.js\n|   |   | ├─part : 所有组件加载必要的模块\n|   |   | |  ├─audioplayer.js\n|   |   | |  ├─brand.js\n|   |   | |  ├─codelib.js\n|   |   | |  ├─comment.js\n|   |   | |  ├─extension.js\n|   |   | |  ├─footer.js\n|   |   | |  ├─gallery.js\n|   |   | |  ├─goingto.js\n|   |   | |  ├─hitokoto.js\n|   |   | |  ├─menus.js\n|   |   | |  ├─page.js\n|   |   | |  ├─panels.js\n|   |   | |  ├─pather.js\n|   |   | |  ├─post.js\n|   |   | |  ├─recentposts.js\n|   |   | |  ├─records.js\n|   |   | |  ├─search.js\n|   |   | |  ├─settings.js\n|   |   | |  ├─sitename.js\n|   |   | |  ├─skin.js\n|   |   | |  ├─timeline.js\n|   |   | |  ├─toc.js\n|   |   | |  ├─translater.js\n|   |   | |  ├─xaside.js\n|   |   | |  ├─xcanvas.js\n|   |   | |  ├─xdrawer.js\n|   |   | |  └xsearch.js\n|   |   | ├─common : 包含所有通用JS函数\n|   |   | |   ├─ajax.js\n|   |   | |   ├─api.js\n|   |   | |   ├─config.js\n|   |   | |   ├─fetch.js\n|   |   | |   ├─lang.js\n|   |   | |   ├─part.js\n|   |   | |   ├─storage.js\n|   |   | |   └util.js\n|   |   ├─img : 所有的固定图像资源文件放这\n|   |   |  ├─android-chrome-192x192.png\n|   |   |  ├─android-chrome-512x512.png\n|   |   |  ├─author.large.png\n|   |   |  ├─author.medium.png\n|   |   |  ├─author.small.png\n|   |   |  ├─by-nc-sa.svg\n|   |   |  ├─icon.large.png\n|   |   |  ├─icon.medium.png\n|   |   |  ├─icon.small.png\n|   |   |  ├─qf3cu.huaji.png\n|   |   |  ├─qf3cu.jpg\n|   |   |  ├─qf3cu.png\n|   |   |  ├─qf3cu.temp.bw.png\n|   |   |  ├─qf3cu.temp.png\n|   |   |  ├─qq.png\n|   |   |  ├─start.png\n|   |   |  ├─start.reverse.png\n|   |   |  └wechat.png\n|   |   ├─font : 所有的字体文件放这\n|   |   |  ├─fa-brands-400.eot\n|   |   |  ├─fa-brands-400.svg\n|   |   |  ├─fa-brands-400.ttf\n|   |   |  ├─fa-brands-400.woff\n|   |   |  ├─fa-brands-400.woff2\n|   |   |  ├─fa-regular-400.eot\n|   |   |  ├─fa-regular-400.svg\n|   |   |  ├─fa-regular-400.ttf\n|   |   |  ├─fa-regular-400.woff\n|   |   |  ├─fa-regular-400.woff2\n|   |   |  ├─fa-solid-900.eot\n|   |   |  ├─fa-solid-900.svg\n|   |   |  ├─fa-solid-900.ttf\n|   |   |  ├─fa-solid-900.woff\n|   |   |  ├─fa-solid-900.woff2\n|   |   |  ├─iconfont.eot\n|   |   |  ├─iconfont.svg\n|   |   |  ├─iconfont.ttf\n|   |   |  ├─iconfont.woff\n|   |   |  └SourceHanSansCN.otf\n|   |   ├─css : 所有的样式文件放这\n|   |   |  ├─style.styl : 引用了所有的样式\n|   |   |  ├─_plugin : 所有第三方样式插件\n|   |   |  |    ├─APlayer.min.css\n|   |   |  |    ├─fontawesome.min.css\n|   |   |  |    ├─github-markdown.min.css\n|   |   |  |    ├─highlight.styl\n|   |   |  |    └share.min.css\n|   |   |  ├─_part : 所有组件样式\n|   |   |  |   ├─audioplayer.styl\n|   |   |  |   ├─brand.styl\n|   |   |  |   ├─codelib.styl\n|   |   |  |   ├─comment.styl\n|   |   |  |   ├─extension.styl\n|   |   |  |   ├─footer.styl\n|   |   |  |   ├─gallery.styl\n|   |   |  |   ├─goingto.styl\n|   |   |  |   ├─hitokoto.styl\n|   |   |  |   ├─menus.styl\n|   |   |  |   ├─page.styl\n|   |   |  |   ├─panels.styl\n|   |   |  |   ├─pather.styl\n|   |   |  |   ├─post.styl\n|   |   |  |   ├─recentposts.styl\n|   |   |  |   ├─records.styl\n|   |   |  |   ├─search.styl\n|   |   |  |   ├─settings.styl\n|   |   |  |   ├─sitename.styl\n|   |   |  |   ├─skin.styl\n|   |   |  |   ├─timeline.styl\n|   |   |  |   ├─toc.styl\n|   |   |  |   ├─translater.styl\n|   |   |  |   ├─xaside.styl\n|   |   |  |   ├─xcanvas.styl\n|   |   |  |   ├─xdrawer.styl\n|   |   |  |   └xsearch.styl\n|   |   |  ├─_common : 包含所有页面的通用样式\n|   |   |  |    ├─color.styl : 所有的受皮肤影响的颜色配置\n|   |   |  |    ├─dimension.styl : 所有的固定距离、固定值等配置\n|   |   |  |    └layout.styl : 所有页面通用样式，主要包含“m-”开头的主模板样式\n├─scripts : 主题预处理脚本文件夹\n|    ├─$filter.js\n|    ├─$helper.js\n|    ├─$renderer.js\n|    ├─renderer\n|    |    ├─$partplus.js\n|    |    └$template.js\n|    ├─plugin : 放改过的预处理时用到的第三方插件\n|    |   ├─pangunode.js\n|    |   ├─toc.js\n|    |   ├─hexo-generator-restful\n|    |   |           ├─index.js\n|    |   |           ├─lib\n|    |   |           |  └generator.js\n|    |   ├─hexo-abbrlink\n|    |   |       ├─index.js\n|    |   |       ├─lib\n|    |   |       |  ├─crc16.js\n|    |   |       |  ├─crc32.js\n|    |   |       |  ├─logic.js\n|    |   |       |  └model.js\n|    ├─helper : 放预处理渲染生成期间用到的函数\n|    |   ├─$count.js\n|    |   ├─$css.js\n|    |   ├─$encode.js\n|    |   ├─$forIn.js\n|    |   ├─$gallery.js\n|    |   ├─$js.js\n|    |   ├─$min2read.js\n|    |   ├─$mjs.js\n|    |   ├─$nomjs.js\n|    |   ├─$word4post.js\n|    |   └$word4site.js\n├─layout : 主题预处理页面模板文件夹\n|   ├─archive.ejs : 管理所有归档页面头部涉及的数据\n|   ├─index.ejs : 管理首页面头部涉及的数据\n|   ├─page.ejs : 管理所有单独页面头部涉及的数据\n|   ├─post.ejs : 管理所有文章页面头部涉及的数据\n|   ├─_partial\n|   |    └frame.ejs : 网页模板，增减改组件和修改头部模板时涉及\n```\n\n## 普通使用主题时涉及的文件及文件夹\n\n```\n├─_config.yml : 主题配置文件，改菜单、改图标、改皮肤、改音乐/一言组件配置、新增组件时涉及\n├─source : 主题资源文件夹\n|   ├─asset\n|   |   ├─part : 所有组件模板文件放这\n|   |   ├─lang : 所有的语言界面资源文件放这\n|   |   |  ├─en.yml : 英文\n|   |   |  └zh-cn.yml : 中文\n|   |   ├─js : 所有的JS资源文件放这\n|   |   | ├─main.js : 管理所有资源的加载和程序\n|   |   | ├─part : 所有组件加载必要的模块\n|   |   ├─css : 所有的样式文件放这\n|   |   |  ├─style.styl : 引用了所有的样式\n|   |   |  ├─_part : 所有组件样式\n├─layout : 主题预处理页面模板文件夹\n|   ├─_partial\n|   |    └frame.ejs : 网页模板，增减改组件和修改头部模板时涉及\n```\n\n# source目录结构\n\n再来看看[source](//github.com/jinyaoMa/ma-jinyao.cn/tree/master/source)的目录结构。\n\n```\n├─CNAME : 锁定github pages域名定向\n├─_posts : 所有的文章\n|   ├─Gallery-Post-Not-Supported.md\n|   ├─Hello-Hexo.md\n|   ├─Helpful-Links.md\n|   ├─HTTP是什么？.md\n|   ├─Markdown-Basic-Syntax.md\n|   ├─Oracle-SQL-Basic-Usage.md\n|   ├─TCP-IP是什么？.md\n|   ├─主题hexo-theme-mustom使用指南.md\n|   ├─旧版日记仿markdown编译代码.md\n|   ├─测试区2048JS代码.md\n|   └网易云音乐歌单JS音乐播放器JS代码.md\n├─resume : 这是个“简历小贴士”单页面\n|   └index.md\n├─records : 这是个“记录”单页面\n|    ├─content.yml : 记录组件加载时从这里读取数据\n|    └index.md\n├─library : 这是个“代码库”单页面\n|    └index.md\n├─letter : 这是个“求职信小贴士”单页面\n|   └index.md\n├─gallery : 这是个“图库”单页面\n|    ├─FaceQ1583444636773.png\n|    ├─http-request-example.jpg\n|    ├─http-request-format.png\n|    ├─http-response-example.jpg\n|    ├─http-response-format.png\n|    ├─index.md\n|    ├─tcp-ip-ipv6-prefix.jpg\n|    ├─tcp-ip-router-network.jpg\n|    ├─tcp-ip-router-subnet.jpg\n|    ├─wallpaper-2311325.jpg\n|    ├─wallpaper-2572384.jpg\n|    ├─wallpaper-878514.jpg\n|    ├─yao2048-0.jpg\n|    └yaoplayer-0.jpg\n├─extension : 这个是本站左下角的扩展功能\n|     ├─content.yml : 扩展组件加载时从这里读取数据\n|     ├─test : “测试”扩展\n|     ├─resume : “简历生成”扩展\n|     ├─palette : “图像颜色提取”扩展\n|     ├─letter : “求职信”扩展\n├─code : 所有使用Hexo标签“include_code”的代码文件都放这\n├─about : 这是个“关于”单页面\n|   └index.md\n```\n\n# 新建单页面例子\n\n**注：需要我的scaffolds/page.md模板为前提**\n\n假如我要新建一个“友链”单页面，我需要运行新建命令：\n\n``` bash\nhexo new page \"links\"\n```\n\n运行命令后得到以下新目录结构\n\n```\n├─_posts\n├─resume\n├─records\n├─links : 新“友链”单页面\n|   └index.md : 模板生成的index.md\n├─library\n├─letter\n├─gallery\n├─extension\n├─code\n├─about\n```\n\n如何修改`links/index.md`可以参考[about/index.md](//raw.githubusercontent.com/jinyaoMa/ma-jinyao.cn/master/source/about/index.md)\n\n## 添加菜单项目\n\n在主题配置`_config.yml`中，按格式新增`menus`下的项目\n\n``` yml\nmenus:\n  main: # 项目组\n    home: # 项目\n      url: / # 项目链接\n      icon: '<i class=\"fas fa-home fa-fw\"></i>' # 项目图标\n    archive: # 项目\n      url: /archives/ # 项目链接\n      icon: '<i class=\"fas fa-archive fa-fw\"></i>' # 项目图标\n    about: # 项目\n      url: /about/ # 项目链接\n      icon: '<i class=\"fas fa-user fa-fw\"></i>' # 项目图标\n    links: # 新项目 <----------------------------------------------------\n      url: /links/  # 新项目链接 <----------------------------------------\n      icon: '<i class=\"fas fa-link fa-fw\"></i>' # 新项目图标 <------------\n```\n\n接下来，在主题`source/asset/lang`文件夹中的`.yml`语言文件新增`menus`下的项目\n\n``` yml\nmenus:\n  main: # 对应_config.yml中的项目组\n    caption: 本站 # 项目组名称\n    items: # 对应_config.yml中的项目\n      home: 首页 # 项目名称\n      archive: 归档 # 项目名称\n      about: 关于 # 项目名称\n      links: 友链 # 新项目名称 <-----------------------------------------\n```\n\n# 新建文章例子\n\n**注：需要我的scaffolds/post.md模板为前提**\n\n假如我要新建一个“HTTP是什么？”文章，我需要运行新建命令：\n\n``` bash\nhexo new \"HTTP是什么？\"\n```\n\n运行命令后得到以下新目录结构\n\n```\n├─_posts\n|   └HTTP是什么？.md : 新“HTTP是什么？”文章\n├─resume\n├─records\n├─links\n├─library\n├─letter\n├─gallery\n├─extension\n├─code\n├─about\n```\n\n打开`HTTP是什么？.md`，可以看到front-matter中没有abbrlink，没有关系，这是自动生成。**如果文章里使用了MathJax，需要设置`mathjax: true`。**\n\n``` yml\n---\ntitle: HTTP是什么？\ncategories:\n  - - null # 分类设置\ntags:\n  - null # 标签设置\nmathjax: false\ndate: 2020-04-10 14:15:34\nupdated: 2020-04-10 14:15:34\n---\n```\n\n# 添加组件例子\n\n假如我要在“友链”单页面里添加一个像\"记录\"单页面下的记录组件，命名为`links`组件：\n\n**首先，在Hexo根目录下`source/links`文件夹建立一个`content.yml`用以记录友链，里面的内容可以是这样的：**\n\n``` yml source/links/content.yml\n# 友链模板\n- name: jinyaoMa\n  site: //ma-jinyao.cn\n  avatar: //ma-jinyao.cn/asset/img/author.medium.png\n# 其他友链\n- name: Test\n  site: //baidu.com\n  avatar: \"\"\n\n# ...以此类推\n```\n\n**然后，在主题目录`themes/mustom`新建和修改以下必要的文件：**\n\n```\n├─_config.yml : 添加需要的图标\n├─source\n|   ├─asset\n|   |   ├─part\n|   |   |  └links.ejs : 必要“组件模板”\n|   |   ├─lang\n|   |   |  ├─en.yml : 添加需要的英文文本\n|   |   |  └zh-cn.yml : 添加需要的中文文本\n|   |   ├─js\n|   |   | ├─part\n|   |   | |  └links.js : 必要“JS加载模块”\n|   |   ├─css\n|   |   |  ├─_part\n|   |   |  |   └links.styl : 必要“组件样式”\n```\n\n`links.ejs`：可以参照[asset/part/records.ejs](//raw.githubusercontent.com/jinyaoMa/ma-jinyao.cn/master/themes/mustom/source/asset/part/records.ejs)组件模板，刚开始可以只有以下部分：\n\n``` html asset/part/links.ejs\n<div class=\"p-links\"><!-- 注意类名 -->\n  <div class=\"p-links-caption\"><!-- 窗口标题部分 -->\n    <%- theme.links.icon %><!-- 窗口标题图标 -->\n    <span data-lang=\"links.caption\"><!-- 加载语言文件中links.caption的字符串 --></span>\n  </div>\n<div>\n```\n\n在`_config.yml`中添加以下代码：\n\n``` yml\nlinks:\n  icon: '<i class=\"fas fa-link fa-fw\"></i>'\n```\n\n在`en.yml`和`zh-cn.yml`中添加以下代码：\n\n``` yml en.yml\nlinks:\n  caption: LINKS\n```\n\n``` yml zh-cn.yml\nlinks:\n  caption: 友链\n```\n\n`links.js`：可以参照[asset/js/part/records.js](//raw.githubusercontent.com/jinyaoMa/ma-jinyao.cn/master/themes/mustom/source/asset/js/part/records.js)加载模块，刚开始可以只有以下部分：\n\n``` js asset/js/part/links.js\nimport part from \"../common/part.js\";\nlet tag = 'links'; // 注意标签名\nlet element = null;\nconst init = (params, callback) => {\n  part(tag, el => {\n    element = el;\n    document.querySelector(tag).replaceWith(element);\n    callback && callback(element);\n  });\n};\nexport default {\n  tag,\n  init\n};\n```\n\n`links.styl`：可以参照[asset/css/_part/records.styl](//raw.githubusercontent.com/jinyaoMa/ma-jinyao.cn/master/themes/mustom/source/asset/css/_part/records.styl)组件样式，刚开始可以什么样式都没有。\n\n**完成必要文件的新建之后，就要把这个组件加载到页面上，需要修改一下文件：**\n\n在Hexo根目录`source/links/index.md`里面的front-matter中标记这个组件。\n\n``` yml source/links/index.md\n---\ntitle: links\nlayout: page\nname: links\nparts: \n  - page\n  - links # 标记组件\n---\n```\n\n在`themes/mustom`主题目录中`source/asset/css/style.styl`引用`links.styl`。\n\n``` styl \n// 文件末尾添加\n@import '_part/links'\n```\n\n在`themes/mustom`主题目录中`source/asset/js/main.js`对号插入以下代码：\n\n``` js\n// 头部所有import下面\nimport links from './part/links.js';\n\n/* Ctrl+F 查找 “Extra Operations”，在“Extra Operations”下添加代码加载组件到“links”单页面 */\n// Extra Operations\nif (/^\\/(links)\\//.test(pathname())) {\n  ajax({\n    url: `/links/content.json`, // content.yml 预编译成的JSON文件，友链的记录文件\n    method: 'get',\n    dataType: 'json',\n    success(data) {\n      parts.includes('links') && links.init({\n        data\n      }, el => {\n        checklist.links = true;\n        progress.step(stepping);\n      });\n    }\n  });\n}\n```\n\n在`themes/mustom`主题目录中`layout/_partial/frame.ejs`中`div.m-content`插入组件标签`<links></links>`。\n\n**通过以上步骤就能把组件添加到单页面“友链”中**\n\n# 删除单页面组件\n\n想要停用某个单页面组件只要在单页面所属`source/YourPage/index.md`里面的front-matter中注释掉组件标记即可，例如：\n\n``` yml\n---\ntitle: links\nlayout: page\nname: links\nparts: \n  - page\n  # - links # 注释掉组件标记\n---\n```\n\n**_我这个主题所用技术都是比较野生和混杂，不懂可以Github Issue我，也可以百度。自己研究一下熟悉之后就简单了，因为来来去去也就几个地方，只是代码分得较细，改动过程鼠标可能比较累。_**","categories":["Hexo"],"tags":["Mustom"]},{"title":"HTTP 是什么？","url":"/posts/8716/","content":"\nHTTP是客户端和服务端之间互动需要准守的其中一种协议。在日常上网过程中，用户通过浏览器浏览目标网站的操作，看起来就是进入目标网站的门户之后，想看哪里就点哪里，但是实际上客户端和服务端之间的数据互动都是通过一套标准来执行的。用旧时代的眼光来看就是网络节点两边统一使用了莫斯代码，所以两边之间的交流就没有了障碍。\n\n<!-- more -->\n\n**先来个更好的文章做参考：[HTTP协议超级详解](//www.cnblogs.com/an-wen/p/11180076.html)**\n\n# HTTP/1.1\n\nHTTP属于TCP/IP中的“顶层”应用层，这说明HTTP的包装是数据出发前的第一步。在这里不谈TCP相关连接过程，但是HTTP请求/响应都是要在连接之后的事；想看的话，可以看[TCP三次握手详解及释放连接过程](//www.cnblogs.com/kaleidoscope/p/9701117.html)。基本上HTTP就是请求和响应的模式，在服务方想理你客户方的情况下，你想要什么，她都会回应你。\n\nHTTP请求方法：\n- GET，一般请求的数据都是不需要处理的数据\n- HEAD，获取metadata，打个比方就是电脑上文件右键属性\n- POST，一般请求的数据都是需要处理的数据\n- PUT，像数据库的INSERT\n- DELETE，像数据库的DELETE\n- PATCH，像数据库的UPDATE\n- 还有TRACE、OPTIONS、CONNECT\n\nHTTP状态码：\n- 100及以上，普通的信息代码\n- 200及以上，请求成功被处理\n- 300及以上，请求被重定向了\n- 400及以上，这是客户方的错\n- 500及以上，这是服务方的错\n\n## HTTP请求/响应报文结构\n\n![HTTP请求报文结构](/gallery/http-request-format.png)*Image from: [HTTP协议超级详解](//www.cnblogs.com/an-wen/p/11180076.html)*\n\n![HTTP请求报文例子](/gallery/http-request-example.jpg)*Image from: [HTTP协议超级详解](//www.cnblogs.com/an-wen/p/11180076.html)*\n\n![HTTP响应报文结构](/gallery/http-response-format.png)*Image from: [HTTP协议超级详解](//www.cnblogs.com/an-wen/p/11180076.html)*\n\n![HTTP响应报文例子](/gallery/http-response-example.jpg)*Image from: [HTTP协议超级详解](//www.cnblogs.com/an-wen/p/11180076.html)*\n\n## 比较HTTP/1.1和HTTP/2\n\n- HTTP/2在一次TCP连接中可以同时发送多个请求，多行程减少了连接次数和响应的等待时间\n- HTTP/2压缩头部信息，包裹更小，运输更方便\n- HTTP/2使用二进制协议，不仅节省了不少分隔符和封箱胶带，还可以分成小份包装以数据流形式发送\n- HTTP/2允许服务端推送，一次请求把相关依赖的脚本也给客户端一起发来，很人性化\n\n# HTTPS\n\n在HTTP包装外再来个SSL/TLS加密包装，HTTPS有以下特点：\n\n1. 内容加密，传输过程中使用的密文\n2. 验证身份，找到对的服务端\n3. 保护数据完整性，防止传输过程中被动手脚\n\n基本上传输中的数据不易被动手脚。\n\n**_更多可以百度HTTP、HTTPS、TCP连接等。_**","categories":["网络"],"tags":["HTTP","HTTPS"]},{"title":"TCP/IP 是什么？","url":"/posts/4785/","content":"\n**本文大半内容都不对，弃了弃了~**\n\n自计算机和互联网出现，大多数计算机都被用于上网、发邮件或者只是通过网路使用一下网络共享打印机。计算机网络[^1]可以连接各种功能不一样的电子设备，例如笔记本电脑、平板电脑、智能手机、服务器、打印机、扫描仪、路由器等设备。如果说以上设备连上网络后都算是“传统”节点，那在现在的物联网时代，各种计算机新品种就可以算作“非传统”节点了吧，毕竟现在能连网的设备真的是五花八门。再说征服王“互联网”现在真的可以说已经征服世界的情况下，计算机网络类型都可以分成5种：\n\n- PAN - 个人网络，一台电脑配打印机等设备\n- LAN - 局域网，一个路由器下的网络\n- WLAN - 无线局域网，一个无线路由器信号覆盖下的网络\n- MAN - 都市网，一个城市的网络\n- WAN - 广域网，一个省、国家或整个世界下的网络，比如互联网\n  \n在这么广阔的网络下，如果节点之间通讯只靠一个“节点ID”作为坐标来互动，那互动时所传输的数据恐怕是要迷路很久甚至有可能累死在路上。**TCP/IP**[^2]就包含了网络相关的标准规范。这个协议集合里的IP部分就很好的为迷路的数据指明了方向。\n\n<!-- more -->\n\n**先来个更好的文章做参考：[太厉害了，终于有人能把TCP/IP协议讲的明明白白了！](//developer.51cto.com/art/201906/597961.htm)，[TCP/UDP常见端口参考](//tool.oschina.net/commons?type=7)**\n\n网络上两个节点之间通讯需要3样东西来指路：\n- 节点在网络上的地址（IP地址）\n- 节点的名称（MAC地址）\n- 节点里应用或服务接收数据的端口（Port端口）\n\n# TCP/IP协议全家桶\n\n全家桶包含ARP, BGP, DHCP, DNS, FTP, HTTP, ICMP, IGMP, IP, TCP, Telnet, TFTP, UDP, WWW等。\n节点上的TCP/IP栈，需跟随所运行的网络应用的要求，从全家桶中选择合适的协议；不同的节点有可能会使用不一样的TCP/IP栈。\n\n## 网络体系结构OSI七层模型\n\n|      | 名称                 | 功能                                                 | TCP/IP协议族                              |\n| ---: | :------------------: | :--------------------------------------------------: | :--------------------------------------: |\n| 7    | 应用层(Applicaiton)   | 终端用户的接口支持：文件传输，电子邮件，文件服务，虚拟终端 | TFTP, HTTP, SNMP, FTP, SMTP, DNS, Telnet |\n| 6    | 表示层(Presentation)  | 数据格式化，代码转换，数据加密                          | N/A                                      |\n| 5    | 会话层(Session)       | 连接管理：解除或建立与别的节点的联系                    | N/A                                      |\n| 4    | 传输层(Transport)     | 端对端传输管理，提供端对端的接口                        | TCP, UDP                                 |\n| 3    | 网络层(Network)       | 端对端路由，为数据包选择路由                           | IP, ICMP, RIP, OSPF, BGP, IGMP           |\n| 2    | 数据链路层(Data Link) | 网络接入和架构管理，传输有地址的帧以及错误检测功能        | SLIP, CSLIP, PPP, ARP, RARP, MTU         |\n| 1    | 物理层(Physical)      | 比特流生成和接收，以二进制数据形式在物理媒体上传输数据    | ISO2110, IEEE802, IEEE802.2              |\n\n# IP协议\n\nIP协议理论上让每个网络不管大小都有一个唯一的IP地址（或称作“节点地址”），但事实上不是每个网络（小到一台电脑配一个打印机）都能独享世界唯一IP地址。讨论“不能独享世界唯一IP地址的情况下，数据到底怎么就不会迷路了？”的问题之前，我们要先认识IP地址的格式。\n\n## IPv4格式\n\nIPv4使用32-bit节点地址，分成4个8-bit部分，例如：\n\n`01110000.11011110.11100110.00001111`\n\n使用十进制的眼光来看这个节点地址就会变成这样：\n\n`112.222.230.15`\n\n每一个8-bit部分的最大值是255。\n一个IP地址包含有两组信息：网络ID和节点ID。\n\n网络ID分为3类：\n- A类\n  + IP地址范围：1.0.0.0 ~ 126.255.255.255\n  + A类网络ID为第1个8-bit部分\n  + 例子：`112.222.230.15`属于A类，网络ID为`112`，节点ID为`222.230.15`\n- B类\n  + IP地址范围：128.0.0.0 ~ 191.255.255.255\n  + B类网络ID为第1-2个8-bit部分\n  + 例子：`142.112.1.70`属于B类，网络ID为`142.112`，节点ID为`1.70`\n- C类\n  + IP地址范围：192.0.0.0 ~ 223.255.255.255\n  + C类网络ID为第1-3个8-bit部分\n  + 例子：`192.168.1.1`属于C类，网络ID为`192.168.1`，节点ID为`1`\n其中以127开头的IP地址为“回环地址”，数据信息的发送者发出的数据流会原样送回发送者。\n网络ID越大，处于该网络下的主机或节点越少。一般家庭用的路由器网络ID为`192.168.1`的情况下最多只能连接254个设备。\n\n## IPv6格式\n\nIPv6使用128-bit节点地址，分成8个4位数的八进制16-bit部分，例如：\n\n`2001:0000:5723:0000:0000:D14E:DBCA:0764`\n\n也可以缩写成这样：\n\n`2001:0:5723::D14E:DBCA:764`\n\n其他例子：\n\n`2001:0DA8:0000:0000:0001:0000:0000:0001` => `2001:DA8::1:0:0:1` OR `2001:DA8:0:0:1::1`\n`0:0:0:0:0:0:0:1` => `::1`\n`0:0:0:0:0:0:0:0` => `::`\n\n开头64-bit包含了网络和子网络的地址，后面64-bit是接口ID。因为IPv6地址是直接赋予接口的，所以一个主机可以有多个IPv6地址对应不同的网络连接。下图拆开开头64-bit网络地址：\n![IPv6 Prefix](/gallery/tcp-ip-ipv6-prefix.jpg)\n\n## 路由器\n\n路由器是能连接多个网络的设备。它们决定了数据的去向，但它们一般都不是数据的最终接收者。数据在传输过程中有可能经过多个跳板[^3]，一般这些数据跳的次数过多且还没到目的地的话就会累死在路上，造成的结果就是发送者得不到回应、响应超时或者收到路由甲回应的死亡信息。\n\n一个ID为`142.222`的网络例子：\n![Network 142.222.x.x](/gallery/tcp-ip-router-network.jpg)\n在这个网络中，所有的主机或节点都是必须要向路由器`142.222.9.255`发送他们的数据，这样数据才可以在这个网络中畅行或者从这个网络发出到更外面的网络；所以在这里路由器`142.222.9.255`被称为是默认网关。\n\n假如在以上网络中主机`142.222.12.27`要发送数据到服务器`112.111.72.56`，数据会先到路由器`142.222.9.255`，路由器会通过路由表查找数据的下个传送目标（随便一提，需要解析域名的情况下，找到一个IP记录丰富的DNS也能让你的数据少跳跳板，数据极低概率会累死在路上）。\n\n假如在以上B类网络基础上存在**子网络**：\n![Network 142.222.x.x with subnet](/gallery/tcp-ip-router-subnet.jpg)\n在子网络中主机`142.222.10.2`要发送数据到服务器`142.123.32.14`，数据会先到路由器`142.222.10.255`，再到外面网络的路由器`142.222.255.255`，再到更外面网络的路由器`142.255.255.255`；找到`142.255.255.255`的下级`142.123.255.255`，再到服务器`142.123.32.14`。当然，如果网络`142.123`底下也有子网络的话，就要通过网关`142.123.32.255`，之后才是服务器`142.123.32.14`。\n\n## MAC地址\n\nMAC地址一般说的就是网卡生产出来自带的12个十六进制数的ID，当然也可以通过软件生成一个随机的MAC地址，只要主机所在的网络路由器上的ARP表上没有就行。它能够在一个网络下确认主机发送者或接收者的身份。因为MAC地址都是厂家定的，对比IP地址，MAC地址就可以有唯一标识了，甚至一人手上说不定还能独享多个“唯一”。MAC地址例子如下：\n\n`00-0B-DB-45-A4-CC`\n\n前6个数代表制造商：`00-0B-DB`\n后6个数为唯一编号：`45-A4-CC`\n\n## ARP协议\n\nARP协议让路由器记录下哪个IP地址对应哪个MAC地址。因为IP地址多数为动态，一个设备说不定某天就移民了，所以路由器一般都有一个ARP表记录和分配IP地址给底下的子民；要是有的子民刚移民过来没有记录在案，在有数据传送过来路由找不到人的情况下会发广播，以这样的操作令底下子民回应，之后强制记录在案。\n\n**_更多可以百度TCP/IP全家桶各种协议，比较重要的还有数据包结构、DHCP[^4]和DNS[^5]。_**\n\n[^1]: 通过软硬件技术支持允许多台计算机之间交流和共享资源\n[^2]: 目前主流的网络相关协议集合，包括应用层、传输层、网络层和网络接口层\n[^3]: 数据在传输过程中经过的路由器\n[^4]: 为网关节点管理下的主机进行动态IP地址的分配；有效防止人工操作的失误；有主机被迁移或更替的情况下能够自动更新配置\n[^5]: 域名服务器能够帮助解析域名到对应IP地址","categories":["网络"],"tags":["TCP/IP","MAC","IPv6","IPv4"]},{"title":"Gallery Post Not Supported","url":"/posts/64366/","content":"\nTheme [Mustom](//github.com/jinyaoMa/hexo-theme-mustom) does NOT SUPPORT variable `photos` in front-matter.\n<!-- more -->\n\nGALLERY POST NOT SUPPORTTED!!!\n\n![Widescreen wallpaper](//raw.githubusercontent.com/hexojs/hexo-theme-unit-test/master/source/assets/wallpaper-2572384.jpg)\n![Portrait photo](//raw.githubusercontent.com/hexojs/hexo-theme-unit-test/master/source/assets/wallpaper-2311325.jpg)\n![Dual widescreen wallpaper](//raw.githubusercontent.com/hexojs/hexo-theme-unit-test/master/source/assets/wallpaper-878514.jpg)\n![Small photo](//placehold.it/350x150.jpg)\n\nThis post contains 4 photos:\n\n- Widescreen wallpaper\n- Portrait photo\n- Dual widescreen wallpaper\n- Small photo\n\nAll photos should be displayed properly.\n\n*From [Wallbase.cc](//wallbase.cc)*\n\n> Original Post from [Hexo Theme Unit Test](//github.com/hexojs/hexo-theme-unit-test)\n","categories":["Blog"],"tags":["Test"]},{"title":"Markdown Basic Syntax","url":"/posts/26104/","content":"\nThis post is originated from [here](//gist.github.com/apackeer/4159268) and is used for testing markdown style. This post contains nearly every markdown usage. Make sure all the markdown elements below show up correctly.\n\n<!-- more -->\n\n-------\n\n# Headers\n\n```markdown\n# H1\n## H2\n### H3\n#### H4\n##### H5\n###### H6\n\nAlternatively, for H1 and H2, an underline-ish style:\n\nAlt-H1\n======\n\nAlt-H2\n------\n```\n\n# H1\n## H2\n### H3\n#### H4\n##### H5\n###### H6\n\n\nAlternatively, for H1 and H2, an underline-ish style:\n\nAlt-H1\n======\n\nAlt-H2\n------\n\n\n## Emphasis\n\n```markdown\nEmphasis, aka italics, with *asterisks* or _underscores_.\n\nStrong emphasis, aka bold, with **asterisks** or __underscores__.\n\nCombined emphasis with **asterisks and _underscores_**.\n\nStrikethrough uses two tildes. ~~Scratch this.~~\n```\n\nEmphasis, aka italics, with *asterisks* or _underscores_.\n\nStrong emphasis, aka bold, with **asterisks** or __underscores__.\n\nCombined emphasis with **asterisks and _underscores_**.\n\nStrikethrough uses two tildes. ~~Scratch this.~~\n\n\n## Lists\n\n```markdown\n1. First ordered list item\n2. Another item\n  * Unordered sub-list.\n1. Actual numbers don't matter, just that it's a number\n  1. Ordered sub-list\n4. And another item.\n\n   You can have properly indented paragraphs within list items. Notice the blank line above, and the leading spaces (at least one, but we'll use three here to also align the raw Markdown).\n\n   To have a line break without a paragraph, you will need to use two trailing spaces.  \n   Note that this line is separate, but within the same paragraph.  \n   (This is contrary to the typical GFM line break behaviour, where trailing spaces are not required.)\n\n* Unordered list can use asterisks\n- Or minuses\n+ Or pluses\n- Paragraph In unordered list\n\n  For example like this.\n\nCommon Paragraph with some text.\nAnd more text.\n```\n\n1. First ordered list item\n2. Another item\n  * Unordered sub-list.\n1. Actual numbers don't matter, just that it's a number\n  1. Ordered sub-list\n4. And another item.\n\n   You can have properly indented paragraphs within list items. Notice the blank line above, and the leading spaces (at least one, but we'll use three here to also align the raw Markdown).\n\n   To have a line break without a paragraph, you will need to use two trailing spaces.  \n   Note that this line is separate, but within the same paragraph.  \n   (This is contrary to the typical GFM line break behaviour, where trailing spaces are not required.)\n\n* Unordered list can use asterisks\n- Or minuses\n+ Or pluses\n- Paragraph In unordered list\n\n  For example like this.\n\nCommon Paragraph with some text.\nAnd more text.\n\n## Inline HTML\n\n```markdown\n<p>To reboot your computer, press <kbd>ctrl</kbd>+<kbd>alt</kbd>+<kbd>del</kbd>.</p>\n```\n\n<p>To reboot your computer, press <kbd>ctrl</kbd>+<kbd>alt</kbd>+<kbd>del</kbd>.</p>\n\n\n```markdown\n<dl>\n    <dt>Definition list</dt>\n    <dd>Is something people use sometimes.</dd>\n\n    <dt>Markdown in HTML</dt>\n    <dd>Does *not* work **very** well. Use HTML <em>tags</em>.</dd>\n</dl>\n```\n\n\n<dl>\n    <dt>Definition list</dt>\n    <dd>Is something people use sometimes.</dd>\n\n    <dt>Markdown in HTML</dt>\n    <dd>Does *not* work **very** well. Use HTML <em>tags</em>.</dd>\n</dl>\n\n\n## Links\n\n```markdown\n[I'm an inline-style link](//www.google.com)\n\n[I'm an inline-style link with title](//www.google.com \"Google's Homepage\")\n\n[I'm a reference-style link][Arbitrary case-insensitive reference text]\n\n[I'm a relative reference to a repository file](../blob/master/LICENSE)\n\n[You can use numbers for reference-style link definitions][1]\n\nOr leave it empty and use the [link text itself]\n\nSome text to show that the reference links can follow later.\n\n[arbitrary case-insensitive reference text]: //hexo.io\n[1]: //hexo.io/docs/\n[link text itself]: //hexo.io/api/\n```\n\n[I'm an inline-style link](//www.google.com)\n\n[I'm an inline-style link with title](//www.google.com \"Google's Homepage\")\n\n[I'm a reference-style link][Arbitrary case-insensitive reference text]\n\n[I'm a relative reference to a repository file](../blob/master/LICENSE)\n\n[You can use numbers for reference-style link definitions][1]\n\nOr leave it empty and use the [link text itself]\n\nSome text to show that the reference links can follow later.\n\n[arbitrary case-insensitive reference text]: //hexo.io\n[1]: //hexo.io/docs/\n[link text itself]: //hexo.io/api/\n\n## Images\n\n```markdown\nhover to see the title text:\n\nInline-style:\n\n![alt text](//hexo.io/icon/favicon-196x196.png \"Logo Title Text 1\")\n\nReference-style:\n![alt text][logo]\n\n[logo]: //hexo.io/icon/favicon-196x196.png \"Logo Title Text 2\"\n```\n\nhover to see the title text:\n\nInline-style:\n\n![alt text](//hexo.io/icon/favicon-196x196.png \"Logo Title Text 1\")\n\nReference-style:\n![alt text][logo]\n\n[logo]: //hexo.io/icon/favicon-196x196.png \"Logo Title Text 2\"\n\n## Code and Syntax Highlighting\n\nInline `code` has `back-ticks around` it.\n\n\n```javascript\nvar s = \"JavaScript syntax highlighting\";\nalert(s);\n```\n\n```python\ns = \"Python syntax highlighting\"\nprint s\n```\n\n```\nNo language indicated, so no syntax highlighting.\nBut let's throw in a <b>tag</b>.\n```\n\n## Tables\n\n```markdown\n|                  | ASCII                           | HTML                          |\n| ---------------- | ------------------------------- | ----------------------------- |\n| Single backticks | `'Isn't this fun?'`             | 'Isn't this fun?'             |\n| Quotes           | `\"Isn't this fun?\"`             | \"Isn't this fun?\"             |\n| Dashes           | `-- is en-dash, --- is em-dash` | -- is en-dash, --- is em-dash |\n```\n\n|                  | ASCII                           | HTML                          |\n| ---------------- | ------------------------------- | ----------------------------- |\n| Single backticks | `'Isn't this fun?'`             | 'Isn't this fun?'             |\n| Quotes           | `\"Isn't this fun?\"`             | \"Isn't this fun?\"             |\n| Dashes           | `-- is en-dash, --- is em-dash` | -- is en-dash, --- is em-dash |\n\n\n\n\nColons can be used to align columns.\n\n```markdown\n| Tables        |      Are      | Cool |\n| ------------- | :-----------: | ---: |\n| col 3 is      | right-aligned |      |\n| col 2 is      |   centered    |      |\n| zebra stripes |   are neat    |\n```\n\n| Tables        |      Are      | Cool |\n| ------------- | :-----------: | ---: |\n| col 3 is      | right-aligned |      |\n| col 2 is      |   centered    |      |\n| zebra stripes |   are neat    |      |\n\nThe outer pipes (|) are optional, and you don't need to make the raw Markdown line up prettily. You can also use inline Markdown.\n\n```markdown\n| | Markdown | Less           | Pretty     |     |\n| | ------------- | --------------- | ---------- |------- |\n| | *Still*   | `renders` | **nicely** | |\n| | 1               | 2                 | 3          |          |\n```\n\n| Markdown | Less      | Pretty     |\n| -------- | --------- | ---------- |\n| *Still*  | `renders` | **nicely** |\n| 1        | 2         | 3          |\n\n## MathJax\n\n```\n$$\\sum_{i=0}^n i^2 = \\frac{(n^2+n)(2n+1)}{6}$$\n$$\nf(n) =\n\\begin{cases}\n\\frac{n}{2},  & \\text{if $n$ is even} \\\\\\\\[2ex]\n3n+1, & \\text{if $n$ is odd}\n\\end{cases}\n$$\n```\n\n$$\\sum_{i=0}^n i^2 = \\frac{(n^2+n)(2n+1)}{6}$$\n$$\nf(n) =\n\\begin{cases}\n\\frac{n}{2},  & \\text{if $n$ is even} \\\\\\\\[2ex]\n3n+1, & \\text{if $n$ is odd}\n\\end{cases}\n$$\n\n> You can find more information about **LaTeX** mathematical expressions [here](//math.meta.stackexchange.com/questions/5020/mathjax-basic-tutorial-and-quick-reference).\n\n## Blockquotes\n\n> Blockquotes are very handy in email to emulate reply text.\n> This line is part of the same quote.\n\nQuote break.\n\n> This is a very long line that will still be quoted properly when it wraps. Oh boy let's keep writing to make sure this is long enough to actually wrap for everyone. Oh, you can *put* **Markdown** into a blockquote.\n\n## Horizontal Rule\n\nThree or more...\n\n```markdown\n---\n\nHyphens\n\n***\n\nAsterisks\n\n___\n\nUnderscores\n```\n\n---\n\nHyphens\n\n***\n\nAsterisks\n\n___\n\nUnderscores\n\n\n## Line Breaks\n\n```markdown\nHere's a line for us to start with.\n\nThis line is separated from the one above by two newlines, so it will be a *separate paragraph*.\n\nThis line is also a separate paragraph, but...\nThis line is only separated by a single newline, so it's a separate line in the *same paragraph*.\n```\n\n\nHere's a line for us to start with.\n\nThis line is separated from the one above by two newlines, so it will be a *separate paragraph*.\n\nThis line is also a separate paragraph, but...\nThis line is only separated by a single newline, so it's a separate line in the *same paragraph*.\n\n\n-----\n\n```markdown\nThis is a regular paragraph.\n\n<table>\n    <tr>\n        <td>Foo</td>\n    </tr>\n</table>\n\nThis is another regular paragraph.\n```\n\nThis is a regular paragraph.\n\n<table>\n    <tr>\n        <td>Foo</td>\n    </tr>\n</table>\n\nThis is another regular paragraph.\n\n## Youtube videos\n\n```markdown\n<a href=\"//www.youtube.com/watch?feature=player_embedded&v=ARted4RniaU\n\" target=\"_blank\"><img src=\"//img.youtube.com/vi/ARted4RniaU/0.jpg\"\nalt=\"IMAGE ALT TEXT HERE\" width=\"240\" height=\"180\" border=\"10\" /></a>\n\nPure markdown version:\n\n[![IMAGE ALT TEXT HERE](//img.youtube.com/vi/ARted4RniaU/0.jpg)](//www.youtube.com/watch?v=ARted4RniaU)\n```\n\n<a href=\"//www.youtube.com/watch?feature=player_embedded&v=ARted4RniaU\n\" target=\"_blank\"><img src=\"//img.youtube.com/vi/ARted4RniaU/0.jpg\"\nalt=\"IMAGE ALT TEXT HERE\" width=\"240\" height=\"180\" border=\"10\" /></a>\n\nPure markdown version:\n\n[![IMAGE ALT TEXT HERE](//img.youtube.com/vi/ARted4RniaU/0.jpg)](//www.youtube.com/watch?v=ARted4RniaU)\n","categories":["Blog","Markdown"],"tags":["Test"]},{"title":"Oracle SQL Basic Usage","url":"/posts/2141/","content":"\nOracle SQL 复习笔记（~~进行中~~放弃了...）\n<!-- more -->\n\n# 笔记 / Cheat Sheet\n\n``` SQL\nconcat(field/string, field/string, field/string...)\nlength(field/string)\nround(number, [integer])\nin(string, string...)\nleft(field/string, unsignedInteger) => js => field/string.substring(0, unsignedInteger)\nreplace(field/string, searchString, replacementString)\nwhere, or, xor, and, != (<>), like, '_%', between ?number and ?number (both number inclusive), not ?operator\nsum(field)\nselect distinct field => non-repeated/unique value\n-- inline comment, a space after --\n/* mutiple-line comment, a space at the very beginning and ending */\norder by\nall(table) => where field > all(select num from nums) -- find something with a field's number larger than all the num from nums\ncount(field)\ngroup by field\nhaving -- must only be used after 'group by' that can use sum(), count(), etc.\n```\n","categories":["Note","SQL"],"tags":["Oracle","SQL"]},{"title":"旧版日记仿 markdown 编译代码","url":"/posts/51385/","content":"\n旧版日记仿markdown编译代码\n<!-- more -->\n\n``` JavaScript\nconst fs = require('hexo-fs');\n\nconst myDiary = fs.readFileSync('source/my.diary');\n\nvar timeRangeAndDiaries = myDiary.split(/-{9,}/); // Split by /-{9,}/ so that having time ranges and diaries separated (trimmed).\n\nfor (var i = 0; i < timeRangeAndDiaries.length; i++) {\n    timeRangeAndDiaries[i] = timeRangeAndDiaries[i].trim();\n\n    if (timeRangeAndDiaries[i].startsWith('#')) { // Edit time ranges to have h2 tags covered.\n        timeRangeAndDiaries[i] = '<h2>' + timeRangeAndDiaries[i].replace('#', '').trim() + '</h2>';\n    } else {\n        // switch \\n to {newline}\n        timeRangeAndDiaries[i] = timeRangeAndDiaries[i].replace(/\\n+/g, '{newline}');\n\n        // Search list tags in each diaries and save them into temps for parts of paragraph.\n        var tempLists = timeRangeAndDiaries[i].match(/\\[list\\](.*?)\\[\\/list\\]/g);\n\n        // Search img tags in each diaries and save them into temps for parts of paragraph.\n        var tempImgs = timeRangeAndDiaries[i].match(/\\[img\\](.*?)\\[\\/img\\]/g);\n\n        // Edit the saved temps for parts of paragraph to html tags and replace them to each diary (clear out newline characters).\n        if (tempLists != null) {\n            for (var j = 0; j < tempLists.length; j++) {\n                var temp = tempLists[j].replace(/\\[\\/?list\\]/g, '').split('{newline}');\n                for (var k = 0; k < temp.length; k++) {\n                    var trimmed = temp[k].replace(/({newline})+/g, '').trim();\n                    if (trimmed == '') {\n                        temp[k] = '';\n                    } else {\n                        temp[k] = '<li>' + trimmed + '</li>';\n                    }\n                }\n                tempLists[j] = '<ul>' + temp.join('') + '</ul>';\n                timeRangeAndDiaries[i] = timeRangeAndDiaries[i].replace(/\\[list\\](.*?)\\[\\/list\\]/, tempLists[j]);\n            }\n        }\n        if (tempImgs != null) {\n            for (var j = 0; j < tempImgs.length; j++) {\n                tempImgs[j] = '<img src=\"' + tempImgs[j].replace(/\\[\\/?img\\]/g, '').replace(/({newline})+/g, '').trim() + '\">';\n                timeRangeAndDiaries[i] = timeRangeAndDiaries[i].replace(/\\[img\\](.*?)\\[\\/img\\]/, tempImgs[j]);\n            }\n        }\n\n        // Split each diary by newline characters and save them into temps for paragraphing.\n        var tempParagraphing = timeRangeAndDiaries[i].replace(/\\n/g, '').split('{newline}');\n\n        // Edit the saved temps for paragraphing to html tags and replace them to each diary (clear out newline characters and empty lines).\n        for (var j = 0; j < tempParagraphing.length; j++) {\n            var trimmed = tempParagraphing[j].replace(/({newline})+/g, '').trim();\n            if (trimmed == '') {\n                tempParagraphing[j] = '';\n            } else if (!trimmed.startsWith('<ul')) {\n                tempParagraphing[j] = '<p>' + trimmed + '</p>';\n            }\n        }\n        var tempDiary = tempParagraphing.join('');\n        if (tempDiary.trim() != '') {\n            timeRangeAndDiaries[i] = '<div class=\"diary-item\">' + tempDiary + '</div>';\n        }\n    }\n}\n\n// Join these converted time ranges and diaries into string.\nvar html = timeRangeAndDiaries.join('');\n// console.log(html)\nfs.writeFileSync('public/diaries.html', html);\n```\n","categories":["Hexo"],"tags":["old blog","diary"]},{"title":"网易云音乐歌单 JS 音乐播放器 JS 代码","url":"/posts/12019/","content":"\n![JS音乐播放器截图](/gallery/yaoplayer-0.jpg)\n网易云音乐歌单JS音乐播放器JS代码\n感谢[MessAPI](//github.com/messoer/mess-api-doc)提供的网易云音乐API\n代码依赖jQuery和fontawesome\n<!-- more -->\n\n## 使用方法\n\n``` JavaScript\n$.get('https://v1.itooi.cn/netease/songList', {\n\t'id': 998389130 // 此处歌单ID\n}, function(json){\n\tif (json.data != undefined && json.data != null &&\n\t\tjson.data.tracks != undefined && json.data.tracks != null) {\n\t\t$('body').append(new YaoPlayer('YaoPlayer', json.data.tracks.map(song => {\n      return {\n        'name': song.name,\n        'singer': song.artists.map(artist => artist.name).join(', '),\n        'lrc': 'Not found',\n        'pic': song.album.picUrl,\n        'url': `https://v1.itooi.cn/netease/url?id=${song.id}&quality=128`\n      };\n    })));\n\t}\n}, 'json');\n```\n\n## 插件全代码\n\n{% include_code lang:javascript from:1 to:59 yaoplayer.js %}","categories":["Blog","Plugin"],"tags":["JavaScript","音乐播放器"]},{"title":"测试区 2048JS 代码","url":"/posts/218/","content":"\n![测试区Yao2048截图](/gallery/yao2048-0.jpg)\n测试区2048JS代码\n<!-- more -->\n\n## 使用方法\n\n``` JavaScript\nvar _2048 = new Yao2048(document.body);\n_2048.show();\n```\n\n## JS全代码\n\n{% include_code lang:javascript from:1 to:28 yao2048.js %}\n","categories":["Blog","Plugin"],"tags":["2048","JavaScript"]},{"title":"Helpful Links","url":"/posts/64322/","content":"\nHelpful Links\n<!-- more -->\n\n### Frameworkds\n[PhoneGap Documentation](//docs.phonegap.com/)\n[jQuery API Documentation](//api.jquery.com/)\n[Bootstrap Documentation](//getbootstrap.com/docs/4.3/getting-started/introduction/)\n[CodeIgniter User Guide](//codeigniter.com/user_guide/)\n[Laravel Documentation](//laravel.com/docs/5.8)\n\n### Game Maker\n[Language Documentation](//docs2.yoyogames.com/)\n\n### HTML, CSS, JavaScript\n[W3schools Portal](//www.w3schools.com/)\n[CSS Zen Garden](//www.csszengarden.com/)\n[Color Pallete Generator](//www.cssdrive.com/imagepalette/index.php)\n[HTML Validator](//validator.w3.org/)\n[CSS Validator](//jigsaw.w3.org/css-validator/)\n[JavaScript Guide](//developer.mozilla.org/en-US/docs/Web/JavaScript/Guide)\n\n### .NET\n[VB Documentation - Microsoft](//docs.microsoft.com/en-us/dotnet/visual-basic/)\n[C# Documentation - Microsoft](//docs.microsoft.com/en-us/dotnet/csharp/)\n[ASP.NET Documentation - Microsoft](//docs.microsoft.com/en-us/aspnet/)\n\n### PHP\n[Language Documentation](//www.php.net/docs.php)\n\n### Java\n[Language Documentation](//docs.oracle.com/javase/8/docs/api/)\n[Threads and Locks - Oracle](//docs.oracle.com/javase/specs/jls/se8/html/jls-17.html)\n[Concurrency - Oracle](//docs.oracle.com/javase/tutorial/essential/concurrency/index.html)\n\n### Python\n[SciPy Reference](//docs.scipy.org/doc/scipy/reference/)\n[NumPy Reference](//docs.scipy.org/doc/numpy/reference/index.html)\n[Python3 Documentation](//docs.python.org/3/)\n[Python Tutorial - W3schools](//www.w3schools.com/python/)\n\n### Swift\n[Language Documentation](//docs.swift.org/swift-book/ReferenceManual/AboutTheLanguageReference.html)\n[Apple Developer Documentation](//developer.apple.com/documentation/)\n\n### SQL\n[SQLZOO Portal](//sqlzoo.net/)\n[SQL Tutorial - W3schools](//www.w3schools.com/sql/default.asp)\n\n### UML\n[UML - IBM Developers](//www.ibm.com/developerworks/cn/rational/r-uml/index.html)\n[Modeling Documentation - Microsoft](//docs.microsoft.com/zh-cn/visualstudio/modeling/create-models-for-your-app?view=vs-2015)\n[uml-diagrams.org](//www.uml-diagrams.org/)\n\n### Node.js\n[Node.js API](//nodejs.org/api/)\n[Express.js](//expressjs.com/en/4x/api.html)\n[SQLite3.js](//www.sqlitetutorial.net/sqlite-nodejs/)\n[Slackbots.js](//www.npmjs.com/package/slackbots)\n[Socket.io](//socket.io/docs/)\n[Redis.js](//redis.js.org/)\n[Vue.js](//vuejs.org/v2/api/)\n[Vuex](//vuex.vuejs.org/guide/)\n\n### Others\n[Android Developers Reference](//developer.android.com/reference)\n[Selenium Command Documentation](//www.seleniumhq.org/selenium-ide/docs/en/api/commands/)\n[REST API standard](//en.wikipedia.org/wiki/Representational_state_transfer#Relationship_between_URL_and_HTTP_methods)\n","categories":["Note"],"tags":["Links"]},{"title":"Hello Hexo!","url":"/posts/9628/","content":"\nWelcome to [Hexo](//hexo.io/)! This is your very first post. Check [documentation](//hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](//hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](//github.com/hexojs/hexo/issues).\n<!-- more -->\n\n## Quick Start\n\n### Create a new post\n\n``` \n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](//hexo.io/docs/writing.html)\n\n### Run server\n\n``` \n$ hexo s\n```\n\nMore info: [Server](//hexo.io/docs/server.html)\n\n### Generate static files\n\n``` \n$ hexo g\n```\n\nMore info: [Generating](//hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` \n$ hexo d\n```\n\nMore info: [Deployment](//hexo.io/docs/deployment.html)\n\n### Generate and deploy\n\n``` \n$ hexo g -d\n```\n\n### Debug\n\n``` \n$ hexo clean --debug\n$ hexo g --debug\n```\n\n---\n> Editing of original generated post \"Hello World\"\n","categories":["Hexo"],"tags":["Command"]}]